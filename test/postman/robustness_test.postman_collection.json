{
	"info": {
		"_postman_id": "1bb97ca4-f02a-4a9b-a2ae-1a8fb07096ff",
		"name": "CI test (robustness)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Shows (1, list_shows())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const shows = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(shows).to.be.an(\"array\")\r",
							"    shows.forEach(function(show) {\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.items).to.be.an(\"array\")\r",
							"        show.items.forEach(function(item) {\r",
							"            pm.expect(item).to.be.an(\"object\")\r",
							"            pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"            pm.expect(item.name).to.be.an(\"string\")\r",
						    "            pm.expect(item.description).to.be.an(\"string\")\r",
							"            pm.expect(item.play_date).to.be.an(\"string\")\r",
							"            pm.expect(item.image_url).to.be.an(\"string\")\r",
							"            if (item.play_file_name != null) {\r",
							"                pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"            }\r",
							"            pm.expect(item.id).to.be.an(\"number\")\r",
							"            pm.expect(item.number).to.be.an(\"number\")\r",
							"            pm.expect(item.download_count).to.be.an(\"number\")\r",
							"        })\r",
							"        pm.expect(show.users).to.be.an(\"array\")\r",
							"        show.users.forEach(function(user) {\r",
							"            pm.expect(user).to.be.an(\"object\")\r",
							"            pm.expect(user.name).to.be.an(\"string\")\r",
							"            pm.expect(user.email).to.be.an(\"string\")\r",
							"            pm.expect(user.id).to.be.an(\"number\")\r",
							"        })\r",
							"        pm.expect(show.active).to.be.an(\"boolean\")\r",
							"        pm.expect(show.archive_lahmastore).to.be.an(\"boolean\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
					        "        pm.expect(show.description).to.be.an(\"string\")\r",
                            "        pm.expect(show.contact_address).to.be.an(\"string\")\r",
							"        pm.expect(show.language).to.be.an(\"string\")\r",
							"        pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        if (show.social_base_url != null) {\r",
							"            pm.expect(show.social_base_url).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"        pm.expect(show.start).to.be.an(\"string\")\r",
							"        pm.expect(show.end).to.be.an(\"string\")\r",
							"        pm.expect(show.day).to.be.an(\"number\")\r",
							"        pm.expect(show.frequency).to.be.an(\"number\")\r",
							"        pm.expect(show.week).to.be.an(\"number\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Shows number is 1\", function() {\r",
							"    pm.expect(shows.length).to.equal(1)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/all",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Show (view_show(id))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const show = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(show).to.be.an(\"object\")\r",
							"    pm.expect(show.items).to.be.an(\"array\")\r",
							"    show.items.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(show.users).to.be.an(\"array\")\r",
							"    show.users.forEach(function(user) {\r",
							"        pm.expect(user).to.be.an(\"object\")\r",
							"        pm.expect(user.name).to.be.an(\"string\")\r",
							"        pm.expect(user.email).to.be.an(\"string\")\r",
							"        pm.expect(user.id).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(show.active).to.be.an(\"boolean\")\r",
							"    pm.expect(show.archive_lahmastore).to.be.an(\"boolean\")\r",
							"    pm.expect(show.name).to.be.an(\"string\")\r",
				  	        "    pm.expect(show.description).to.be.an(\"string\")\r",
                            "    pm.expect(show.contact_address).to.be.an(\"string\")\r",
							"    pm.expect(show.language).to.be.an(\"string\")\r",
							"    pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"    pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"    if (show.social_base_url != null) {\r",
							"        pm.expect(show.social_base_url).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"    pm.expect(show.start).to.be.an(\"string\")\r",
							"    pm.expect(show.end).to.be.an(\"string\")\r",
							"    pm.expect(show.day).to.be.an(\"number\")\r",
							"    pm.expect(show.frequency).to.be.an(\"number\")\r",
							"    pm.expect(show.week).to.be.an(\"number\")\r",
							"    pm.expect(show.id).to.be.an(\"number\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/:id",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Items (4, list_items())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const items = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(items).to.be.an(\"array\")\r",
							"    items.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.shows).to.be.an(\"array\")\r",
							"        item.shows.forEach(function(show){\r",
							"            pm.expect(show).to.be.an(\"object\")\r",
							"            pm.expect(show.name).to.be.an(\"string\")\r",
							"            pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"            pm.expect(show.id).to.be.an(\"number\")\r",
							"        })\r",
							"        pm.expect(item.live).to.be.an(\"boolean\")\r",
							"        pm.expect(item.broadcast).to.be.an(\"boolean\")\r",
							"        if (item.airing != null) {\r",
							"            pm.expect(item.airing).to.be.an(\"boolean\")\r",
							"        }\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.archive_lahmastore).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.language).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.archive_lahmastore_canonical_url).to.be.an(\"string\")\r",
							"        pm.expect(item.social_base_url).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.uploader).to.be.an(\"string\")\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Episodes number is 4\", function() {\r",
							"    pm.expect(items.length).to.equal(4)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/item/all",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "View Item (1, view_item(id))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const item = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(item).to.be.an(\"object\")\r",
							"    pm.expect(item.shows).to.be.an(\"array\")\r",
							"    item.shows.forEach(function(show) {\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(item.live).to.be.an(\"boolean\")\r",
							"    pm.expect(item.broadcast).to.be.an(\"boolean\")\r",
							"    if (item.airing != null) {\r",
							"        pm.expect(item.airing).to.be.an(\"boolean\")\r",
							"    }\r",
							"    pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"    pm.expect(item.archive_lahmastore).to.be.an(\"boolean\")\r",
							"    pm.expect(item.name).to.be.an(\"string\")\r",
							"    pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"    pm.expect(item.description).to.be.an(\"string\")\r",
							"    pm.expect(item.language).to.be.an(\"string\")\r",
							"    pm.expect(item.play_date).to.be.an(\"string\")\r",
							"    pm.expect(item.archive_lahmastore_canonical_url).to.be.an(\"string\")\r",
							"    pm.expect(item.social_base_url).to.be.an(\"string\")\r",
							"    pm.expect(item.image_url).to.be.an(\"string\")\r",
							"    if (item.play_file_name != null) {\r",
							"        pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(item.uploader).to.be.an(\"string\")\r",
							"    pm.expect(item.id).to.be.an(\"number\")\r",
							"    pm.expect(item.number).to.be.an(\"number\")\r",
							"    pm.expect(item.download_count).to.be.an(\"number\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/item/:id",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "View Item (2, view_item(id))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const item = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(item).to.be.an(\"object\")\r",
							"    pm.expect(item.shows).to.be.an(\"array\")\r",
							"    item.shows.forEach(function(show) {\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(item.live).to.be.an(\"boolean\")\r",
							"    pm.expect(item.broadcast).to.be.an(\"boolean\")\r",
							"    if (item.airing != null) {\r",
							"        pm.expect(item.airing).to.be.an(\"boolean\")\r",
							"    }\r",
							"    pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"    pm.expect(item.archive_lahmastore).to.be.an(\"boolean\")\r",
							"    pm.expect(item.name).to.be.an(\"string\")\r",
							"    pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"    pm.expect(item.description).to.be.an(\"string\")\r",
							"    pm.expect(item.language).to.be.an(\"string\")\r",
							"    pm.expect(item.play_date).to.be.an(\"string\")\r",
							"    pm.expect(item.archive_lahmastore_canonical_url).to.be.an(\"string\")\r",
							"    pm.expect(item.social_base_url).to.be.an(\"string\")\r",
							"    pm.expect(item.image_url).to.be.an(\"string\")\r",
							"    if (item.play_file_name != null) {\r",
							"        pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(item.uploader).to.be.an(\"string\")\r",
							"    pm.expect(item.id).to.be.an(\"number\")\r",
							"    pm.expect(item.number).to.be.an(\"number\")\r",
							"    pm.expect(item.download_count).to.be.an(\"number\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/item/:id",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "View Item (3, view_item(id))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const item = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(item).to.be.an(\"object\")\r",
							"    pm.expect(item.shows).to.be.an(\"array\")\r",
							"    item.shows.forEach(function(show) {\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(item.live).to.be.an(\"boolean\")\r",
							"    pm.expect(item.broadcast).to.be.an(\"boolean\")\r",
							"    if (item.airing != null) {\r",
							"        pm.expect(item.airing).to.be.an(\"boolean\")\r",
							"    }\r",
							"    pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"    pm.expect(item.archive_lahmastore).to.be.an(\"boolean\")\r",
							"    pm.expect(item.name).to.be.an(\"string\")\r",
							"    pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"    pm.expect(item.description).to.be.an(\"string\")\r",
							"    pm.expect(item.language).to.be.an(\"string\")\r",
							"    pm.expect(item.play_date).to.be.an(\"string\")\r",
							"    pm.expect(item.archive_lahmastore_canonical_url).to.be.an(\"string\")\r",
							"    pm.expect(item.social_base_url).to.be.an(\"string\")\r",
							"    pm.expect(item.image_url).to.be.an(\"string\")\r",
							"    if (item.play_file_name != null) {\r",
							"        pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(item.uploader).to.be.an(\"string\")\r",
							"    pm.expect(item.id).to.be.an(\"number\")\r",
							"    pm.expect(item.number).to.be.an(\"number\")\r",
							"    pm.expect(item.download_count).to.be.an(\"number\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/item/:id",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "View Item (4, view_item(id))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const item = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(item).to.be.an(\"object\")\r",
							"    pm.expect(item.shows).to.be.an(\"array\")\r",
							"    item.shows.forEach(function(show) {\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(item.live).to.be.an(\"boolean\")\r",
							"    pm.expect(item.broadcast).to.be.an(\"boolean\")\r",
							"    if (item.airing != null) {\r",
							"        pm.expect(item.airing).to.be.an(\"boolean\")\r",
							"    }\r",
							"    pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"    pm.expect(item.archive_lahmastore).to.be.an(\"boolean\")\r",
							"    pm.expect(item.name).to.be.an(\"string\")\r",
							"    pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"    pm.expect(item.description).to.be.an(\"string\")\r",
							"    pm.expect(item.language).to.be.an(\"string\")\r",
							"    pm.expect(item.play_date).to.be.an(\"string\")\r",
							"    pm.expect(item.archive_lahmastore_canonical_url).to.be.an(\"string\")\r",
							"    pm.expect(item.social_base_url).to.be.an(\"string\")\r",
							"    pm.expect(item.image_url).to.be.an(\"string\")\r",
							"    if (item.play_file_name != null) {\r",
							"        pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(item.uploader).to.be.an(\"string\")\r",
							"    pm.expect(item.id).to.be.an(\"number\")\r",
							"    pm.expect(item.number).to.be.an(\"number\")\r",
							"    pm.expect(item.download_count).to.be.an(\"number\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/item/:id",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Latest Items (list_items_latest())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"\r",
							"const jsonData = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(jsonData).to.be.an(\"array\")\r",
							"    jsonData.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.shows).to.be.an(\"array\")\r",
							"        item.shows.forEach(function(show){\r",
							"            pm.expect(show).to.be.an(\"object\")\r",
							"            pm.expect(show.name).to.be.an(\"string\")\r",
							"            pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"            pm.expect(show.id).to.be.an(\"number\")\r",
							"        })\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.language).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/item/latest?page=1&size=12",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"latest"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "size",
							"value": "12"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Item (search_item())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html; charset=utf-8\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"\r",
							"const jsonData = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(jsonData).to.be.an(\"array\")\r",
							"    jsonData.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.shows).to.be.an(\"array\")\r",
							"        item.shows.forEach(function(show){\r",
							"            pm.expect(show).to.be.an(\"object\")\r",
							"            pm.expect(show.name).to.be.an(\"string\")\r",
							"            pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"            pm.expect(show.id).to.be.an(\"number\")\r",
							"        })\r",
							"        pm.expect(item.live).to.be.an(\"boolean\")\r",
							"        pm.expect(item.broadcast).to.be.an(\"boolean\")\r",
							"        if (item.airing != null) {\r",
							"            pm.expect(item.airing).to.be.an(\"boolean\")\r",
							"        }\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.archive_lahmastore).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.language).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.archive_lahmastore_canonical_url).to.be.an(\"string\")\r",
							"        pm.expect(item.social_base_url).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.uploader).to.be.an(\"string\")\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/item/search?param=item&page=1&size=12",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"search"
					],
					"query": [
						{
							"key": "param",
							"value": "item"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "size",
							"value": "12"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Shows Paginated (list_shows_page())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"\r",
							"const jsonData = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(jsonData).to.be.an(\"array\")\r",
							"    jsonData.forEach(function(show) {\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.active).to.be.an(\"boolean\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
						    "        pm.expect(show.description).to.be.an(\"string\")\r",
							"        pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        if (show.social_base_url != null) {\r",
							"            pm.expect(show.social_base_url).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/list",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Shows without Items (list_shows_without_items())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"\r",
							"const jsonData = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(jsonData).to.be.an(\"array\")\r",
							"    jsonData.forEach(function(show) {\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.users).to.be.an(\"array\")\r",
							"        show.users.forEach(function(user) {\r",
							"            pm.expect(user).to.be.an(\"object\")\r",
							"            pm.expect(user.name).to.be.an(\"string\")\r",
							"            pm.expect(user.email).to.be.an(\"string\")\r",
							"            pm.expect(user.id).to.be.an(\"number\")\r",
							"        })\r",
							"        pm.expect(show.active).to.be.an(\"boolean\")\r",
							"        pm.expect(show.archive_lahmastore).to.be.an(\"boolean\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
						    "        pm.expect(show.description).to.be.an(\"string\")\r",
                            "        pm.expect(show.contact_address).to.be.an(\"string\")\r",
							"        pm.expect(show.language).to.be.an(\"string\")\r",
							"        pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        if (show.social_base_url != null) {\r",
							"            pm.expect(show.social_base_url).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"        pm.expect(show.start).to.be.an(\"string\")\r",
							"        pm.expect(show.end).to.be.an(\"string\")\r",
							"        pm.expect(show.day).to.be.an(\"number\")\r",
							"        pm.expect(show.frequency).to.be.an(\"number\")\r",
							"        pm.expect(show.week).to.be.an(\"number\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/all_without_items",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						"all_without_items"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Show (search_show())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"\r",
							"const jsonData = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(jsonData).to.be.an(\"array\")\r",
							"    jsonData.forEach(function(show) {\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.users).to.be.an(\"array\")\r",
							"        show.users.forEach(function(user) {\r",
							"            pm.expect(user).to.be.an(\"object\")\r",
							"            pm.expect(user.name).to.be.an(\"string\")\r",
							"            pm.expect(user.email).to.be.an(\"string\")\r",
							"            pm.expect(user.id).to.be.an(\"number\")\r",
							"        })\r",
							"        pm.expect(show.active).to.be.an(\"boolean\")\r",
							"        pm.expect(show.archive_lahmastore).to.be.an(\"boolean\")\r",
              				"        pm.expect(show.contact_address).to.be.an(\"string\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
							"        pm.expect(show.description).to.be.an(\"string\")\r",
							"        pm.expect(show.language).to.be.an(\"string\")\r",
							"        pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        if (show.social_base_url != null) {\r",
							"            pm.expect(show.social_base_url).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"        pm.expect(show.start).to.be.an(\"string\")\r",
							"        pm.expect(show.end).to.be.an(\"string\")\r",
							"        pm.expect(show.day).to.be.an(\"number\")\r",
							"        pm.expect(show.frequency).to.be.an(\"number\")\r",
							"        pm.expect(show.week).to.be.an(\"number\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/search?param=show&page=1&size=12",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						"search"
					],
					"query": [
						{
							"key": "param",
							"value": "show"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "size",
							"value": "12"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Shows for Schedule (list_shows_for_schedule())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"\r",
							"const jsonData = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(jsonData).to.be.an(\"array\")\r",
							"    jsonData.forEach(function(show) {\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.users).to.be.an(\"array\")\r",
							"        show.users.forEach(function(user) {\r",
							"            pm.expect(user).to.be.an(\"object\")\r",
							"            pm.expect(user.name).to.be.an(\"string\")\r",
							"            pm.expect(user.email).to.be.an(\"string\")\r",
							"            pm.expect(user.id).to.be.an(\"number\")\r",
							"        })\r",
							"        pm.expect(show.active).to.be.an(\"boolean\")\r",
							"        pm.expect(show.archive_lahmastore).to.be.an(\"boolean\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
							"        pm.expect(show.description).to.be.an(\"string\")\r",
							"        pm.expect(show.language).to.be.an(\"string\")\r",
							"        pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        if (show.social_base_url != null) {\r",
							"            pm.expect(show.social_base_url).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"        pm.expect(show.start).to.be.an(\"string\")\r",
							"        pm.expect(show.end).to.be.an(\"string\")\r",
							"        pm.expect(show.day).to.be.an(\"number\")\r",
							"        pm.expect(show.frequency).to.be.an(\"number\")\r",
							"        pm.expect(show.week).to.be.an(\"number\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/schedule",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						"schedule"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Shows for Schedule by Day (list_shows_for_schedule_by())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"/*\r",
							"const jsonData = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    if (pm.expect(jsonData).to.be.an(\"array\")) {\r",
							"        jsonData.forEach(function(show) {\r",
							"            pm.expect(show).to.be.an(\"object\")\r",
							"            if (show.items != null) {\r",
							"                const latestEpisode = show.items\r",
							"                pm.expect(latestEpisode).to.be.an(\"object\")\r",
							"                pm.expect(latestEpisode.archived).to.be.an(\"boolean\")\r",
							"                pm.expect(latestEpisode.name).to.be.an(\"string\")\r",
							"                pm.expect(latestEpisode.name_slug).to.be.an(\"string\")\r",
							"                pm.expect(latestEpisode.description).to.be.an(\"string\")\r",
							"                pm.expect(latestEpisode.play_date).to.be.an(\"string\")\r",
							"                pm.expect(latestEpisode.image_url).to.be.an(\"string\")\r",
							"                if (latestEpisode.play_file_name != null) {\r",
							"                    pm.expect(latestEpisode.play_file_name).to.be.an(\"string\")\r",
							"                }\r",
							"                pm.expect(latestEpisode.id).to.be.an(\"number\")\r",
							"                pm.expect(latestEpisode.number).to.be.an(\"number\")\r",
							"                pm.expect(latestEpisode.download_count).to.be.an(\"number\")\r",
							"            }\r",
							"            pm.expect(show.active).to.be.an(\"boolean\")\r",
							"            pm.expect(show.name).to.be.an(\"string\")\r",
							"            pm.expect(show.description).to.be.an(\"string\")\r",
							"            pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"            pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"            pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"            pm.expect(show.start).to.be.an(\"string\")\r",
							"            pm.expect(show.end).to.be.an(\"string\")\r",
							"            pm.expect(show.day).to.be.an(\"number\")\r",
							"            pm.expect(show.frequency).to.be.an(\"number\")\r",
							"            pm.expect(show.id).to.be.an(\"number\")\r",
							"        })\r",
							"    }\r",
							"    else if (pm.expect(jsonData).to.be.an(\"object\")) {\r",
							"        const show = jsonData\r",
							"        if (show.items != null) {\r",
							"            const latestEpisode = show.items\r",
							"            pm.expect(latestEpisode).to.be.an(\"object\")\r",
							"            pm.expect(latestEpisode.archived).to.be.an(\"boolean\")\r",
							"            pm.expect(latestEpisode.name).to.be.an(\"string\")\r",
							"            pm.expect(latestEpisode.name_slug).to.be.an(\"string\")\r",
							"            pm.expect(latestEpisode.description).to.be.an(\"string\")\r",
							"            pm.expect(latestEpisode.play_date).to.be.an(\"string\")\r",
							"            pm.expect(latestEpisode.image_url).to.be.an(\"string\")\r",
							"            if (latestEpisode.play_file_name != null) {\r",
							"                pm.expect(latestEpisode.play_file_name).to.be.an(\"string\")\r",
							"            }\r",
							"            pm.expect(latestEpisode.id).to.be.an(\"number\")\r",
							"            pm.expect(latestEpisode.number).to.be.an(\"number\")\r",
							"            pm.expect(latestEpisode.download_count).to.be.an(\"number\")\r",
							"        }\r",
							"        pm.expect(show.active).to.be.an(\"boolean\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
							"        pm.expect(show.description).to.be.an(\"string\")\r",
							"        pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"        pm.expect(show.start).to.be.an(\"string\")\r",
							"        pm.expect(show.end).to.be.an(\"string\")\r",
							"        pm.expect(show.day).to.be.an(\"number\")\r",
							"        pm.expect(show.frequency).to.be.an(\"number\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    }\r",
							"    else {\r",
							"        pm.expect(jsonData).to.be.equal(\"[]\")\r",
							"    }\r",
							"})\r",
							"*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/schedule_by?day=1",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						"schedule_by"
					],
					"query": [
						{
							"key": "day",
							"value": "1"
						}
					]
				}
			},
			"response": []
		}
	]
}
