{
	"info": {
		"_postman_id": "6999efa4-6ab4-446e-b27e-5e7cddbc7c64",
		"name": "CI test (functional)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Guest API Token (get_api_token())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = JSON.parse(responseBody)\r",
							"pm.environment.set(\"api_token_guest\", response.api_token);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"});\r",
							"\r",
							"pm.test(\"API token has been set up: \" + pm.environment.get(\"api_token_guest\"), function() {\r",
							"    pm.expect(pm.environment.get(\"api_token_guest\")).not.equal(\"\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "testguest",
							"type": "text"
						},
						{
							"key": "password",
							"value": "YhhU8Z4W2dVbKNf",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/users/get_api_token",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"get_api_token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Admin API Token (get_api_token())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = JSON.parse(responseBody)\r",
							"pm.environment.set(\"api_token_admin\", response.api_token);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"});\r",
							"\r",
							"pm.test(\"API token has been set up: \" + pm.environment.get(\"api_token_admin\"), function() {\r",
							"    pm.expect(pm.environment.get(\"api_token_admin\")).not.equal(\"\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "testadmin",
							"type": "text"
						},
						{
							"key": "password",
							"value": "YhhU8Z4W2dVbKNf",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/users/get_api_token",
					"host": [
						"{{url}}"
					],
					"path": [
						"users",
						"get_api_token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Shows (0, list_shows())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const shows = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(shows).to.be.an(\"array\")\r",
							"    shows.forEach(function(show) {\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.items).to.be.an(\"array\")\r",
							"        show.items.forEach(function(item) {\r",
							"            pm.expect(item).to.be.an(\"object\")\r",
							"            pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"            pm.expect(item.name).to.be.an(\"string\")\r",
							"            pm.expect(item.description).to.be.an(\"string\")\r",
							"            pm.expect(item.play_date).to.be.an(\"string\")\r",
							"            pm.expect(item.image_url).to.be.an(\"string\")\r",
							"            if (item.play_file_name != null) {\r",
							"                pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"            }\r",
							"            pm.expect(item.id).to.be.an(\"number\")\r",
							"            pm.expect(item.number).to.be.an(\"number\")\r",
							"            pm.expect(item.download_count).to.be.an(\"number\")\r",
							"        })\r",
							"        pm.expect(show.users).to.be.an(\"array\")\r",
							"        show.users.forEach(function(user) {\r",
							"            pm.expect(user).to.be.an(\"object\")\r",
							"            pm.expect(user.name).to.be.an(\"string\")\r",
							"            pm.expect(user.email).to.be.an(\"string\")\r",
							"            pm.expect(user.id).to.be.an(\"number\")\r",
							"        })\r",
							"        pm.expect(show.active).to.be.an(\"boolean\")\r",
							"        pm.expect(show.archive_lahmastore).to.be.an(\"boolean\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
							"        pm.expect(show.description).to.be.an(\"string\")\r",
							"        pm.expect(show.contact_address).to.be.an(\"string\")\r",
							"        pm.expect(show.language).to.be.an(\"string\")\r",
							"        pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        if (show.external_url != null) {\r",
							"            pm.expect(show.external_url).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"        pm.expect(show.start).to.be.an(\"string\")\r",
							"        pm.expect(show.end).to.be.an(\"string\")\r",
							"        pm.expect(show.day).to.be.an(\"number\")\r",
							"        pm.expect(show.frequency).to.be.an(\"number\")\r",
							"        pm.expect(show.week).to.be.an(\"number\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Shows number is 0\", function() {\r",
							"    pm.expect(shows.length).to.equal(0)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/all",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Tags (0, list_tags())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const tags = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(tags).to.be.an(\"array\")\r",
							"    tags.forEach(function(tag) {\r",
							"        pm.expect(tag).to.be.an(\"object\")\r",
							"        pm.expect(tag.shows).to.be.an(\"array\")\r",
							"        if (tag.shows != null) {\r",
							"            tag.shows.forEach(function(show){\r",
							"                pm.expect(show).to.be.an(\"object\")\r",
							"                pm.expect(show.name).to.be.an(\"string\")\r",
							"                pm.expect(show.id).to.be.an(\"number\")\r",
							"            })\r",
							"        }\r",
							"        pm.expect(tag.items).to.be.an(\"array\")\r",
							"        if (tag.items != null) {\r",
							"            tag.items.forEach(function(item){\r",
							"                pm.expect(item).to.be.an(\"object\")\r",
							"                pm.expect(item.name).to.be.an(\"string\")\r",
							"                pm.expect(item.id).to.be.an(\"number\")\r",
							"            })\r",
							"        }\r",
							"        pm.expect(tag.display_name).to.be.an(\"string\")\r",
							"        pm.expect(tag.clean_name).to.be.an(\"string\")\r",
							"        if (tag.icon != null) {\r",
							"            pm.expect(tag.icon).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(tag.id).to.be.an(\"number\")\r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Tags number is 0\", function() {\r",
							"    pm.expect(tags.length).to.equal(0)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/tag/all",
					"host": [
						"{{url}}"
					],
					"path": [
						"tag",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Show (add_show()) fails with guest user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"API needs admin role! Status code is 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "users",
							"value": "1",
							"type": "text"
						},
						{
							"key": "user_name",
							"value": "example-user_name",
							"type": "text"
						},
						{
							"key": "user_email",
							"value": "example-user_email",
							"type": "text"
						},
						{
							"key": "active",
							"value": "true",
							"type": "text"
						},
						{
							"key": "name",
							"value": "a-test-show-about-{{$randomWord}}",
							"type": "text"
						},
						{
							"key": "description",
							"value": "newly created show for tests",
							"type": "text"
						},
						{
							"key": "language",
							"value": "hu_hu",
							"type": "text"
						},
						{
							"key": "playlist_name",
							"value": "example-playlist_name",
							"type": "text"
						},
						{
							"key": "frequency",
							"value": "1",
							"type": "text"
						},
						{
							"key": "week",
							"value": "1",
							"type": "text"
						},
						{
							"key": "day",
							"value": "1",
							"type": "text"
						},
						{
							"key": "start",
							"value": "14:00",
							"type": "text"
						},
						{
							"key": "end",
							"value": "16:20",
							"type": "text"
						},
						{
							"key": "archive_lahmastore",
							"value": "true",
							"type": "text"
						},
						{
							"key": "image_file",
							"type": "file",
							"src": "testlogo.jpg"
						},
						{
							"key": "external_url",
							"value": "www.{{$randomWord}}.hu",
							"type": "default"
						},
						{
							"key": "taglist",
							"value": "tag1, tag2, tag3",
							"type": "default"
						},
						{
							"key": "contact_address",
							"value": "test@lahmacun.hu",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/show/add",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Show (add_show())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"});\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"var show = JSON.parse(responseBody)\r",
							"pm.environment.set(\"new_show_id\", show.id);\r",
							"pm.environment.set(\"new_show_name\", show.name);\r",
							"pm.environment.set(\"new_show_slug\", show.archive_lahmastore_base_url);\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(show).to.be.an(\"object\")\r",
							"    pm.expect(show.items).to.be.an(\"array\")\r",
							"    pm.expect(show.users).to.be.an(\"array\")\r",
							"    show.users.forEach(function(user) {\r",
							"        pm.expect(user).to.be.an(\"object\")\r",
							"        pm.expect(user.name).to.be.an(\"string\")\r",
							"        pm.expect(user.email).to.be.an(\"string\")\r",
							"        pm.expect(user.id).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(show.active).to.be.an(\"boolean\")\r",
							"    pm.expect(show.archive_lahmastore).to.be.an(\"boolean\")\r",
							"    pm.expect(show.name).to.be.an(\"string\")\r",
							"    pm.expect(show.description).to.be.an(\"string\")\r",
							"    pm.expect(show.contact_address).to.be.an(\"string\")\r",
							"    pm.expect(show.language).to.be.an(\"string\")\r",
							"    pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"    pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"    if (show.external_url != null) {\r",
							"        pm.expect(show.external_url).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"    pm.expect(show.start).to.be.an(\"string\")\r",
							"    pm.expect(show.end).to.be.an(\"string\")\r",
							"    pm.expect(show.day).to.be.an(\"number\")\r",
							"    pm.expect(show.frequency).to.be.an(\"number\")\r",
							"    pm.expect(show.week).to.be.an(\"number\")\r",
							"    pm.expect(show.id).to.be.an(\"number\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "users",
							"value": "1",
							"type": "text"
						},
						{
							"key": "user_name",
							"value": "example-user_name",
							"type": "text"
						},
						{
							"key": "user_email",
							"value": "example-user_email",
							"type": "text"
						},
						{
							"key": "active",
							"value": "true",
							"type": "text"
						},
						{
							"key": "name",
							"value": "a-test-show-about-{{$randomWord}}",
							"type": "text"
						},
						{
							"key": "description",
							"value": "newly created lahmacun show for tests",
							"type": "text"
						},
						{
							"key": "language",
							"value": "hu_hu",
							"type": "text"
						},
						{
							"key": "playlist_name",
							"value": "example-playlist_name",
							"type": "text"
						},
						{
							"key": "frequency",
							"value": "1",
							"type": "text"
						},
						{
							"key": "week",
							"value": "1",
							"type": "text"
						},
						{
							"key": "day",
							"value": "1",
							"type": "text"
						},
						{
							"key": "start",
							"value": "14:00",
							"type": "text"
						},
						{
							"key": "end",
							"value": "16:20",
							"type": "text"
						},
						{
							"key": "archive_lahmastore",
							"value": "true",
							"type": "text"
						},
						{
							"key": "image_file",
							"type": "file",
							"src": "testlogo.jpg"
						},
						{
							"key": "external_url",
							"value": "www.{{$randomWord}}.hu",
							"type": "default"
						},
						{
							"key": "taglist",
							"value": "tag1 , tag2 , tag3",
							"type": "default"
						},
						{
							"key": "contact_address",
							"value": "test@lahmacun.hu",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/show/add",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Tags (3, list_tags())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const tags = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(tags).to.be.an(\"array\")\r",
							"    tags.forEach(function(tag) {\r",
							"        pm.expect(tag).to.be.an(\"object\")\r",
							"        pm.expect(tag.display_name).to.be.an(\"string\")\r",
							"        pm.expect(tag.clean_name).to.be.an(\"string\")\r",
							"        pm.expect(tag.id).to.be.an(\"number\")\r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Tags number is 3\", function() {\r",
							"    pm.expect(tags.length).to.equal(3)\r",
							"})\r",
							"\r",
							"pm.test(\"Tags are stripped\", function() {\r",
							"    pm.expect(tags[0].display_name).to.equal(\"tag1\")\r",
							"    pm.expect(tags[1].display_name).to.equal(\"tag2\")\r",
							"    pm.expect(tags[2].display_name).to.equal(\"tag3\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/tag/all",
					"host": [
						"{{url}}"
					],
					"path": [
						"tag",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Tag (view_tagged())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const tag = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(tag).to.be.an(\"object\")\r",
							"    pm.expect(tag.shows).to.be.an(\"array\")\r",
							"    if (tag.shows != null) {\r",
							"        tag.shows.forEach(function(show){\r",
							"            pm.expect(show).to.be.an(\"object\")\r",
							"            pm.expect(show.name).to.be.an(\"string\")\r",
							"            pm.expect(show.description).to.be.an(\"string\")\r",
							"            pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"            pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"            pm.expect(show.id).to.be.an(\"number\")\r",
							"            if (show.tags != null) {\r",
							"                show.tags.forEach(function(tag){\r",
							"                    pm.expect(tag).to.be.an(\"object\")\r",
							"                    pm.expect(tag.display_name).to.be.an(\"string\")\r",
							"                    pm.expect(tag.clean_name).to.be.an(\"string\")\r",
							"                    pm.expect(tag.id).to.be.an(\"number\")\r",
							"                })\r",
							"            }\r",
							"        })\r",
							"    }\r",
							"    pm.expect(tag.items).to.be.an(\"array\")\r",
							"    if (tag.items != null) {\r",
							"        tag.items.forEach(function(item){\r",
							"            pm.expect(item).to.be.an(\"object\")\r",
							"            pm.expect(item.name).to.be.an(\"string\")\r",
							"            pm.expect(item.image_url).to.be.an(\"string\")\r",
							"            pm.expect(item.description).to.be.an(\"string\")\r",
							"            pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"            pm.expect(item.play_date).to.be.an(\"string\")\r",
							"            pm.expect(item.id).to.be.an(\"number\")\r",
							"            if (item.shows != null) {\r",
							"                item.shows.forEach(function(show){\r",
							"                    pm.expect(show).to.be.an(\"object\")\r",
							"                    pm.expect(show.name).to.be.an(\"string\")\r",
							"                    pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"                    pm.expect(show.id).to.be.an(\"number\")\r",
							"                })\r",
							"            }\r",
							"            if (item.tags != null) {\r",
							"                item.tags.forEach(function(tag){\r",
							"                    pm.expect(tag).to.be.an(\"object\")\r",
							"                    pm.expect(tag.display_name).to.be.an(\"string\")\r",
							"                    pm.expect(tag.clean_name).to.be.an(\"string\")\r",
							"                    pm.expect(tag.id).to.be.an(\"number\")\r",
							"                })\r",
							"            }\r",
							"        })\r",
							"    }\r",
							"    pm.expect(tag.display_name).to.be.an(\"string\")\r",
							"    pm.expect(tag.clean_name).to.be.an(\"string\")\r",
							"    if (tag.icon != null) {\r",
							"        pm.expect(tag.icon).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(tag.id).to.be.an(\"number\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/tag/:clean_tag",
					"host": [
						"{{url}}"
					],
					"path": [
						"tag",
						":clean_tag"
					],
					"variable": [
						{
							"key": "clean_tag",
							"value": "tag1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Shows (1, list_shows())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const shows = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(shows).to.be.an(\"array\")\r",
							"    shows.forEach(function(show) {\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.items).to.be.an(\"array\")\r",
							"        show.items.forEach(function(item) {\r",
							"            pm.expect(item).to.be.an(\"object\")\r",
							"            pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"            pm.expect(item.name).to.be.an(\"string\")\r",
							"            pm.expect(item.description).to.be.an(\"string\")\r",
							"            pm.expect(item.play_date).to.be.an(\"string\")\r",
							"            pm.expect(item.image_url).to.be.an(\"string\")\r",
							"            if (item.play_file_name != null) {\r",
							"                pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"            }\r",
							"            pm.expect(item.id).to.be.an(\"number\")\r",
							"            pm.expect(item.number).to.be.an(\"number\")\r",
							"            pm.expect(item.download_count).to.be.an(\"number\")\r",
							"        })\r",
							"        pm.expect(show.users).to.be.an(\"array\")\r",
							"        show.users.forEach(function(user) {\r",
							"            pm.expect(user).to.be.an(\"object\")\r",
							"            pm.expect(user.name).to.be.an(\"string\")\r",
							"            pm.expect(user.email).to.be.an(\"string\")\r",
							"            pm.expect(user.id).to.be.an(\"number\")\r",
							"        })\r",
							"        pm.expect(show.active).to.be.an(\"boolean\")\r",
							"        pm.expect(show.archive_lahmastore).to.be.an(\"boolean\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
							"        pm.expect(show.description).to.be.an(\"string\")\r",
							"        pm.expect(show.contact_address).to.be.an(\"string\")\r",
							"        pm.expect(show.language).to.be.an(\"string\")\r",
							"        pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        if (show.external_url != null) {\r",
							"            pm.expect(show.external_url).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"        pm.expect(show.start).to.be.an(\"string\")\r",
							"        pm.expect(show.end).to.be.an(\"string\")\r",
							"        pm.expect(show.day).to.be.an(\"number\")\r",
							"        pm.expect(show.frequency).to.be.an(\"number\")\r",
							"        pm.expect(show.week).to.be.an(\"number\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Shows number is 1\", function() {\r",
							"    pm.expect(shows.length).to.equal(1)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/all",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Show (view_show(id))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const show = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(show).to.be.an(\"object\")\r",
							"    pm.expect(show.items).to.be.an(\"array\")\r",
							"    show.items.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(show.users).to.be.an(\"array\")\r",
							"    show.users.forEach(function(user) {\r",
							"        pm.expect(user).to.be.an(\"object\")\r",
							"        pm.expect(user.name).to.be.an(\"string\")\r",
							"        pm.expect(user.email).to.be.an(\"string\")\r",
							"        pm.expect(user.id).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(show.active).to.be.an(\"boolean\")\r",
							"    pm.expect(show.archive_lahmastore).to.be.an(\"boolean\")\r",
							"    pm.expect(show.name).to.be.an(\"string\")\r",
							"    pm.expect(show.description).to.be.an(\"string\")\r",
							"    pm.expect(show.contact_address).to.be.an(\"string\")\r",
							"    pm.expect(show.language).to.be.an(\"string\")\r",
							"    pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"    pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"    if (show.external_url != null) {\r",
							"        pm.expect(show.external_url).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"    pm.expect(show.start).to.be.an(\"string\")\r",
							"    pm.expect(show.end).to.be.an(\"string\")\r",
							"    pm.expect(show.day).to.be.an(\"number\")\r",
							"    pm.expect(show.frequency).to.be.an(\"number\")\r",
							"    pm.expect(show.week).to.be.an(\"number\")\r",
							"    pm.expect(show.id).to.be.an(\"number\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/:id",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{new_show_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Items (0, list_items())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const items = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(items).to.be.an(\"array\")\r",
							"    items.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.shows).to.be.an(\"array\")\r",
							"        item.shows.forEach(function(show){\r",
							"            pm.expect(show).to.be.an(\"object\")\r",
							"            pm.expect(show.name).to.be.an(\"string\")\r",
							"            pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"            pm.expect(show.id).to.be.an(\"number\")\r",
							"        })\r",
							"        pm.expect(item.live).to.be.an(\"boolean\")\r",
							"        pm.expect(item.broadcast).to.be.an(\"boolean\")\r",
							"        if (item.airing != null) {\r",
							"            pm.expect(item.airing).to.be.an(\"boolean\")\r",
							"        }\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.archive_lahmastore).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.language).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.archive_lahmastore_canonical_url).to.be.an(\"string\")\r",
							"        pm.expect(item.external_url).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.uploader).to.be.an(\"string\")\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Episodes number is 0\", function() {\r",
							"    pm.expect(items.length).to.equal(0)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/item/all",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Item (1 live, add_item()) fails with guest user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"API needs admin role! Status code is 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "shows",
							"value": "{{new_show_id}}",
							"type": "text"
						},
						{
							"key": "show_name",
							"value": "{{new_show_name}}",
							"type": "text"
						},
						{
							"key": "number",
							"value": "1",
							"type": "text"
						},
						{
							"key": "name",
							"value": "example-item1",
							"type": "text"
						},
						{
							"key": "description",
							"value": "new live item 1",
							"type": "text"
						},
						{
							"key": "language",
							"value": "hu_hu",
							"type": "text"
						},
						{
							"key": "play_date",
							"value": "2023-01-01",
							"type": "text"
						},
						{
							"key": "live",
							"value": "true",
							"type": "text"
						},
						{
							"key": "broadcast",
							"value": "false",
							"type": "text"
						},
						{
							"key": "archive_lahmastore",
							"value": "true",
							"type": "text"
						},
						{
							"key": "uploader",
							"value": "1",
							"type": "text"
						},
						{
							"key": "image_file",
							"type": "file",
							"src": "testlogo.jpg"
						},
						{
							"key": "play_file",
							"type": "file",
							"src": []
						},
						{
							"key": "external_url",
							"value": "new live item 1",
							"type": "default"
						},
						{
							"key": "taglist",
							"value": "tag1, tag2, tag3",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/item/add",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Show for Show Subpage (view_show_page(show_slug))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"const show = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(show).to.be.an(\"object\")\r",
							"    pm.expect(show.items).to.be.an(\"array\")\r",
							"    show.items.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(show.active).to.be.an(\"boolean\")\r",
							"    pm.expect(show.name).to.be.an(\"string\")\r",
							"    pm.expect(show.description).to.be.an(\"string\")\r",
							"    pm.expect(show.language).to.be.an(\"string\")\r",
							"    pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"    pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"    if (show.external_url != null) {\r",
							"        pm.expect(show.external_url).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"    pm.expect(show.start).to.be.an(\"string\")\r",
							"    pm.expect(show.end).to.be.an(\"string\")\r",
							"    pm.expect(show.day).to.be.an(\"number\")\r",
							"    pm.expect(show.frequency).to.be.an(\"number\")\r",
							"    pm.expect(show.id).to.be.an(\"number\")\r",
							"})\r",
							"\r",
							"pm.test(\"Episodes number is 0\", function() {\r",
							"    pm.expect(show.items.length).to.equal(0)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/:show_slug/page?filter=archived",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						":show_slug",
						"page"
					],
					"query": [
						{
							"key": "filter",
							"value": "archived"
						}
					],
					"variable": [
						{
							"key": "show_slug",
							"value": "{{new_show_slug}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Show for Show Subpage (view_show_page(show_slug))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"const show = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(show).to.be.an(\"object\")\r",
							"    pm.expect(show.items).to.be.an(\"array\")\r",
							"    show.items.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(show.active).to.be.an(\"boolean\")\r",
							"    pm.expect(show.name).to.be.an(\"string\")\r",
							"    pm.expect(show.description).to.be.an(\"string\")\r",
							"    pm.expect(show.language).to.be.an(\"string\")\r",
							"    pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"    pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"    if (show.external_url != null) {\r",
							"        pm.expect(show.external_url).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"    pm.expect(show.start).to.be.an(\"string\")\r",
							"    pm.expect(show.end).to.be.an(\"string\")\r",
							"    pm.expect(show.day).to.be.an(\"number\")\r",
							"    pm.expect(show.frequency).to.be.an(\"number\")\r",
							"    pm.expect(show.id).to.be.an(\"number\")\r",
							"})\r",
							"\r",
							"pm.test(\"Episodes number is 0\", function() {\r",
							"    pm.expect(show.items.length).to.equal(0)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/:show_slug/page?filter=latest",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						":show_slug",
						"page"
					],
					"query": [
						{
							"key": "filter",
							"value": "latest"
						}
					],
					"variable": [
						{
							"key": "show_slug",
							"value": "{{new_show_slug}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Item (1 live, add_item())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"});\r",
							"\r",
							"pm.test(\"API responds within 20 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 20000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"var item = JSON.parse(responseBody)\r",
							"pm.environment.set(\"new_item_id\", item.id);\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(item).to.be.an(\"object\");\r",
							"    pm.expect(item.shows).to.be.an(\"array\");\r",
							"    item.shows.forEach(function(show) {\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(item.airing).to.be.an(\"boolean\");\r",
							"    pm.expect(item.archive_lahmastore).to.be.an(\"boolean\");\r",
							"    pm.expect(item.archived).to.be.an(\"boolean\");\r",
							"    pm.expect(item.broadcast).to.be.an(\"boolean\");\r",
							"    pm.expect(item.live).to.be.an(\"boolean\");\r",
							"    pm.expect(item.archive_lahmastore_canonical_url).to.be.an(\"string\");\r",
							"    pm.expect(item.external_url).to.be.an(\"string\");\r",
							"    pm.expect(item.description).to.be.an(\"string\");\r",
							"    pm.expect(item.image_url).to.be.an(\"string\");\r",
							"    pm.expect(item.language).to.be.an(\"string\");\r",
							"    pm.expect(item.name).to.be.an(\"string\");\r",
							"    pm.expect(item.play_date).to.be.an(\"string\");\r",
							"    if (item.play_file_name != null) {\r",
							"        pm.expect(item.play_file_name).to.be.an(\"string\");\r",
							"    }\r",
							"    pm.expect(item.uploader).to.be.an(\"string\");\r",
							"    pm.expect(item.download_count).to.be.an(\"number\");\r",
							"    pm.expect(item.id).to.be.an(\"number\");\r",
							"    pm.expect(item.number).to.be.an(\"number\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var moment = require('moment');\r",
							"\r",
							"pm.environment.set('play_date', moment().subtract(15, 'day').format((\"YYYY-MM-DD\")));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "shows",
							"value": "{{new_show_id}}",
							"type": "text"
						},
						{
							"key": "show_name",
							"value": "{{new_show_name}}",
							"type": "text"
						},
						{
							"key": "number",
							"value": "1",
							"type": "text"
						},
						{
							"key": "name",
							"value": "example-item1",
							"type": "text"
						},
						{
							"key": "description",
							"value": "new live lahmacun  item 1",
							"type": "text"
						},
						{
							"key": "language",
							"value": "hu_hu",
							"type": "text"
						},
						{
							"key": "play_date",
							"value": "{{play_date}}",
							"type": "text"
						},
						{
							"key": "live",
							"value": "true",
							"type": "text"
						},
						{
							"key": "broadcast",
							"value": "false",
							"type": "text"
						},
						{
							"key": "archive_lahmastore",
							"value": "true",
							"type": "text"
						},
						{
							"key": "uploader",
							"value": "1",
							"type": "text"
						},
						{
							"key": "image_file",
							"type": "file",
							"src": "testlogo.jpg"
						},
						{
							"key": "play_file",
							"type": "file",
							"src": []
						},
						{
							"key": "external_url",
							"value": "new live item 1",
							"type": "default"
						},
						{
							"key": "taglist",
							"value": "tag1, tag2, tag3",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/item/add",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Show for Show Subpage (view_show_page(show_slug))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"const show = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(show).to.be.an(\"object\")\r",
							"    pm.expect(show.items).to.be.an(\"array\")\r",
							"    show.items.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(show.active).to.be.an(\"boolean\")\r",
							"    pm.expect(show.name).to.be.an(\"string\")\r",
							"    pm.expect(show.description).to.be.an(\"string\")\r",
							"    pm.expect(show.language).to.be.an(\"string\")\r",
							"    pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"    pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"    if (show.external_url != null) {\r",
							"        pm.expect(show.external_url).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"    pm.expect(show.start).to.be.an(\"string\")\r",
							"    pm.expect(show.end).to.be.an(\"string\")\r",
							"    pm.expect(show.day).to.be.an(\"number\")\r",
							"    pm.expect(show.frequency).to.be.an(\"number\")\r",
							"    pm.expect(show.id).to.be.an(\"number\")\r",
							"})\r",
							"\r",
							"pm.test(\"Episodes number is 0\", function() {\r",
							"    pm.expect(show.items.length).to.equal(0)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/:show_slug/page?filter=archived",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						":show_slug",
						"page"
					],
					"query": [
						{
							"key": "filter",
							"value": "archived"
						}
					],
					"variable": [
						{
							"key": "show_slug",
							"value": "{{new_show_slug}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Show for Show Subpage (view_show_page(show_slug))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"const show = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(show).to.be.an(\"object\")\r",
							"    pm.expect(show.items).to.be.an(\"object\")\r",
							"    pm.expect(show.items.archived).to.be.an(\"boolean\")\r",
							"    pm.expect(show.items.name).to.be.an(\"string\")\r",
							"    pm.expect(show.items.name_slug).to.be.an(\"string\")\r",
							"    pm.expect(show.items.description).to.be.an(\"string\")\r",
							"    pm.expect(show.items.play_date).to.be.an(\"string\")\r",
							"    pm.expect(show.items.image_url).to.be.an(\"string\")\r",
							"    if (show.items.play_file_name != null) {\r",
							"        pm.expect(show.items.play_file_name).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.items.id).to.be.an(\"number\")\r",
							"    pm.expect(show.items.number).to.be.an(\"number\")\r",
							"    pm.expect(show.items.download_count).to.be.an(\"number\")\r",
							"    pm.expect(show.active).to.be.an(\"boolean\")\r",
							"    pm.expect(show.name).to.be.an(\"string\")\r",
							"    pm.expect(show.description).to.be.an(\"string\")\r",
							"    pm.expect(show.language).to.be.an(\"string\")\r",
							"    pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"    pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"    if (show.external_url != null) {\r",
							"        pm.expect(show.external_url).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"    pm.expect(show.start).to.be.an(\"string\")\r",
							"    pm.expect(show.end).to.be.an(\"string\")\r",
							"    pm.expect(show.day).to.be.an(\"number\")\r",
							"    pm.expect(show.frequency).to.be.an(\"number\")\r",
							"    pm.expect(show.id).to.be.an(\"number\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/:show_slug/page?filter=latest",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						":show_slug",
						"page"
					],
					"query": [
						{
							"key": "filter",
							"value": "latest"
						}
					],
					"variable": [
						{
							"key": "show_slug",
							"value": "{{new_show_slug}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Items (1, list_items())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const items = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(items).to.be.an(\"array\")\r",
							"    items.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.shows).to.be.an(\"array\")\r",
							"        item.shows.forEach(function(show){\r",
							"            pm.expect(show).to.be.an(\"object\")\r",
							"            pm.expect(show.name).to.be.an(\"string\")\r",
							"            pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"            pm.expect(show.id).to.be.an(\"number\")\r",
							"        })\r",
							"        pm.expect(item.live).to.be.an(\"boolean\")\r",
							"        pm.expect(item.broadcast).to.be.an(\"boolean\")\r",
							"        if (item.airing != null) {\r",
							"            pm.expect(item.airing).to.be.an(\"boolean\")\r",
							"        }\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.archive_lahmastore).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.language).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.archive_lahmastore_canonical_url).to.be.an(\"string\")\r",
							"        pm.expect(item.external_url).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.uploader).to.be.an(\"string\")\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Episodes number is 1\", function() {\r",
							"    pm.expect(items.length).to.equal(1)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/item/all",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Item (1 live -> broadcast, edit_item(id)) fails with guest user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"API needs admin role! Status code is 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "shows",
							"value": "{{new_show_id}}",
							"type": "text"
						},
						{
							"key": "show_name",
							"value": "{{new_show_name}}",
							"type": "text"
						},
						{
							"key": "number",
							"value": "1",
							"type": "text"
						},
						{
							"key": "name",
							"value": "example-item1",
							"type": "text"
						},
						{
							"key": "description",
							"value": "edit live item 1 to broadcast",
							"type": "text"
						},
						{
							"key": "language",
							"value": "hu_en",
							"type": "text"
						},
						{
							"key": "play_date",
							"value": "2023-01-02",
							"type": "text"
						},
						{
							"key": "live",
							"value": "false",
							"type": "text"
						},
						{
							"key": "broadcast",
							"value": "true",
							"type": "text"
						},
						{
							"key": "airing",
							"value": "true",
							"type": "text",
							"disabled": true
						},
						{
							"key": "uploader",
							"value": "1",
							"type": "text"
						},
						{
							"key": "archive_lahmastore",
							"value": "true",
							"type": "text"
						},
						{
							"key": "image_file",
							"type": "file",
							"src": "testlogo.jpg"
						},
						{
							"key": "play_file",
							"type": "file",
							"src": "testaudio.mp3"
						},
						{
							"key": "external_url",
							"value": "new live item 1",
							"type": "default"
						},
						{
							"key": "taglist",
							"value": "tag1, tag2, tag3",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/item/:id/edit",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						":id",
						"edit"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{new_item_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Item (1 live -> broadcast, edit_item(id))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"});\r",
							"\r",
							"pm.test(\"API responds within 20 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 20000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"var item = JSON.parse(responseBody)\r",
							"pm.environment.set(\"new_item_id\", item.id);\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(item).to.be.an(\"object\");\r",
							"    pm.expect(item.shows).to.be.an(\"array\");\r",
							"    item.shows.forEach(function(show) {\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(item.airing).to.be.an(\"boolean\");\r",
							"    pm.expect(item.archive_lahmastore).to.be.an(\"boolean\");\r",
							"    pm.expect(item.archived).to.be.an(\"boolean\");\r",
							"    pm.expect(item.broadcast).to.be.an(\"boolean\");\r",
							"    pm.expect(item.live).to.be.an(\"boolean\");\r",
							"    pm.expect(item.archive_lahmastore_canonical_url).to.be.an(\"string\");\r",
							"    pm.expect(item.external_url).to.be.an(\"string\");\r",
							"    pm.expect(item.description).to.be.an(\"string\");\r",
							"    pm.expect(item.image_url).to.be.an(\"string\");\r",
							"    pm.expect(item.language).to.be.an(\"string\");\r",
							"    pm.expect(item.name).to.be.an(\"string\");\r",
							"    pm.expect(item.play_date).to.be.an(\"string\");\r",
							"    if (item.play_file_name != null) {\r",
							"        pm.expect(item.play_file_name).to.be.an(\"string\");\r",
							"    }\r",
							"    pm.expect(item.uploader).to.be.an(\"string\");\r",
							"    pm.expect(item.download_count).to.be.an(\"number\");\r",
							"    pm.expect(item.id).to.be.an(\"number\");\r",
							"    pm.expect(item.number).to.be.an(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"Audio file uploaded with name: \" + item.play_file_name, () => {\r",
							"    pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var moment = require('moment');\r",
							"\r",
							"pm.environment.set('play_date', moment().subtract(14, 'day').format((\"YYYY-MM-DD\")));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "shows",
							"value": "{{new_show_id}}",
							"type": "text"
						},
						{
							"key": "show_name",
							"value": "{{new_show_name}}",
							"type": "text"
						},
						{
							"key": "number",
							"value": "1",
							"type": "text"
						},
						{
							"key": "name",
							"value": "example-item1",
							"type": "text"
						},
						{
							"key": "description",
							"value": "edit live lahmacun item 1 to broadcast",
							"type": "text"
						},
						{
							"key": "language",
							"value": "hu_en",
							"type": "text"
						},
						{
							"key": "play_date",
							"value": "{{play_date}}",
							"type": "text"
						},
						{
							"key": "live",
							"value": "false",
							"type": "text"
						},
						{
							"key": "broadcast",
							"value": "true",
							"type": "text"
						},
						{
							"key": "airing",
							"value": "true",
							"type": "text",
							"disabled": true
						},
						{
							"key": "uploader",
							"value": "1",
							"type": "text"
						},
						{
							"key": "archive_lahmastore",
							"value": "true",
							"type": "text"
						},
						{
							"key": "image_file",
							"type": "file",
							"src": "testlogo.jpg"
						},
						{
							"key": "play_file",
							"type": "file",
							"src": "testaudio.mp3"
						},
						{
							"key": "external_url",
							"value": "new live item 1",
							"type": "default"
						},
						{
							"key": "taglist",
							"value": "tag1, tag2, tag3",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/item/:id/edit",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						":id",
						"edit"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{new_item_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Show for Show Subpage (view_show_page(show_slug))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"const show = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(show).to.be.an(\"object\")\r",
							"    pm.expect(show.items).to.be.an(\"array\")\r",
							"    show.items.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(show.active).to.be.an(\"boolean\")\r",
							"    pm.expect(show.name).to.be.an(\"string\")\r",
							"    pm.expect(show.description).to.be.an(\"string\")\r",
							"    pm.expect(show.language).to.be.an(\"string\")\r",
							"    pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"    pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"    if (show.external_url != null) {\r",
							"        pm.expect(show.external_url).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"    pm.expect(show.start).to.be.an(\"string\")\r",
							"    pm.expect(show.end).to.be.an(\"string\")\r",
							"    pm.expect(show.day).to.be.an(\"number\")\r",
							"    pm.expect(show.frequency).to.be.an(\"number\")\r",
							"    pm.expect(show.id).to.be.an(\"number\")\r",
							"})\r",
							"\r",
							"pm.test(\"Episodes number is 1\", function() {\r",
							"    pm.expect(show.items.length).to.equal(1)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/:show_slug/page?filter=archived",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						":show_slug",
						"page"
					],
					"query": [
						{
							"key": "filter",
							"value": "archived"
						}
					],
					"variable": [
						{
							"key": "show_slug",
							"value": "{{new_show_slug}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Item (2 broadcast, add_item())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"});\r",
							"\r",
							"pm.test(\"API responds within 20 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 20000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"var item = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(item).to.be.an(\"object\");\r",
							"    pm.expect(item.shows).to.be.an(\"array\");\r",
							"    item.shows.forEach(function(show) {\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(item.airing).to.be.an(\"boolean\");\r",
							"    pm.expect(item.archive_lahmastore).to.be.an(\"boolean\");\r",
							"    pm.expect(item.archived).to.be.an(\"boolean\");\r",
							"    pm.expect(item.broadcast).to.be.an(\"boolean\");\r",
							"    pm.expect(item.live).to.be.an(\"boolean\");\r",
							"    pm.expect(item.archive_lahmastore_canonical_url).to.be.an(\"string\");\r",
							"    pm.expect(item.external_url).to.be.an(\"string\");\r",
							"    pm.expect(item.description).to.be.an(\"string\");\r",
							"    pm.expect(item.image_url).to.be.an(\"string\");\r",
							"    pm.expect(item.language).to.be.an(\"string\");\r",
							"    pm.expect(item.name).to.be.an(\"string\");\r",
							"    pm.expect(item.play_date).to.be.an(\"string\");\r",
							"    if (item.play_file_name != null) {\r",
							"        pm.expect(item.play_file_name).to.be.an(\"string\");\r",
							"    }\r",
							"    pm.expect(item.uploader).to.be.an(\"string\");\r",
							"    pm.expect(item.download_count).to.be.an(\"number\");\r",
							"    pm.expect(item.id).to.be.an(\"number\");\r",
							"    pm.expect(item.number).to.be.an(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"Audio file uploaded with name: \" + item.play_file_name, () => {\r",
							"    pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var moment = require('moment');\r",
							"\r",
							"pm.environment.set('play_date', moment().subtract(7, 'day').format((\"YYYY-MM-DD\")));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "shows",
							"value": "{{new_show_id}}",
							"type": "text"
						},
						{
							"key": "show_name",
							"value": "{{new_show_name}}",
							"type": "text"
						},
						{
							"key": "number",
							"value": "2",
							"type": "text"
						},
						{
							"key": "name",
							"value": "example-item2",
							"type": "text"
						},
						{
							"key": "description",
							"value": "new broadcast lahmacun item 2",
							"type": "text"
						},
						{
							"key": "language",
							"value": "hu_hu",
							"type": "text"
						},
						{
							"key": "play_date",
							"value": "{{play_date}}",
							"type": "text"
						},
						{
							"key": "live",
							"value": "false",
							"type": "text"
						},
						{
							"key": "broadcast",
							"value": "true",
							"type": "text"
						},
						{
							"key": "archive_lahmastore",
							"value": "true",
							"type": "text"
						},
						{
							"key": "uploader",
							"value": "1",
							"type": "text"
						},
						{
							"key": "image_file",
							"type": "file",
							"src": "testlogo.jpg"
						},
						{
							"key": "play_file",
							"type": "file",
							"src": "testaudio.mp3"
						},
						{
							"key": "external_url",
							"value": "new live item 1",
							"type": "default"
						},
						{
							"key": "taglist",
							"value": "",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/item/add",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Show for Show Subpage (view_show_page(show_slug))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"const show = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(show).to.be.an(\"object\")\r",
							"    pm.expect(show.items).to.be.an(\"array\")\r",
							"    show.items.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(show.active).to.be.an(\"boolean\")\r",
							"    pm.expect(show.name).to.be.an(\"string\")\r",
							"    pm.expect(show.description).to.be.an(\"string\")\r",
							"    pm.expect(show.language).to.be.an(\"string\")\r",
							"    pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"    pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"    if (show.external_url != null) {\r",
							"        pm.expect(show.external_url).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"    pm.expect(show.start).to.be.an(\"string\")\r",
							"    pm.expect(show.end).to.be.an(\"string\")\r",
							"    pm.expect(show.day).to.be.an(\"number\")\r",
							"    pm.expect(show.frequency).to.be.an(\"number\")\r",
							"    pm.expect(show.id).to.be.an(\"number\")\r",
							"})\r",
							"\r",
							"pm.test(\"Episodes number is 2\", function() {\r",
							"    pm.expect(show.items.length).to.equal(2)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/:show_slug/page?filter=archived",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						":show_slug",
						"page"
					],
					"query": [
						{
							"key": "filter",
							"value": "archived"
						}
					],
					"variable": [
						{
							"key": "show_slug",
							"value": "{{new_show_slug}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Show for Show Subpage (view_show_page(show_slug))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"const show = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(show).to.be.an(\"object\")\r",
							"    pm.expect(show.items).to.be.an(\"object\")\r",
							"    pm.expect(show.items.archived).to.be.an(\"boolean\")\r",
							"    pm.expect(show.items.name).to.be.an(\"string\")\r",
							"    pm.expect(show.items.name_slug).to.be.an(\"string\")\r",
							"    pm.expect(show.items.description).to.be.an(\"string\")\r",
							"    pm.expect(show.items.play_date).to.be.an(\"string\")\r",
							"    pm.expect(show.items.image_url).to.be.an(\"string\")\r",
							"    if (show.items.play_file_name != null) {\r",
							"        pm.expect(show.items.play_file_name).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.items.id).to.be.an(\"number\")\r",
							"    pm.expect(show.items.number).to.be.an(\"number\")\r",
							"    pm.expect(show.items.download_count).to.be.an(\"number\")\r",
							"    pm.expect(show.active).to.be.an(\"boolean\")\r",
							"    pm.expect(show.name).to.be.an(\"string\")\r",
							"    pm.expect(show.description).to.be.an(\"string\")\r",
							"    pm.expect(show.language).to.be.an(\"string\")\r",
							"    pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"    pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"    if (show.external_url != null) {\r",
							"        pm.expect(show.external_url).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"    pm.expect(show.start).to.be.an(\"string\")\r",
							"    pm.expect(show.end).to.be.an(\"string\")\r",
							"    pm.expect(show.day).to.be.an(\"number\")\r",
							"    pm.expect(show.frequency).to.be.an(\"number\")\r",
							"    pm.expect(show.id).to.be.an(\"number\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/:show_slug/page?filter=archived,latest",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						":show_slug",
						"page"
					],
					"query": [
						{
							"key": "filter",
							"value": "archived,latest"
						}
					],
					"variable": [
						{
							"key": "show_slug",
							"value": "{{new_show_slug}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Tags (4, list_tags())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const tags = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(tags).to.be.an(\"array\")\r",
							"    tags.forEach(function(tag) {\r",
							"        pm.expect(tag).to.be.an(\"object\")\r",
							"        pm.expect(tag.display_name).to.be.an(\"string\")\r",
							"        pm.expect(tag.clean_name).to.be.an(\"string\")\r",
							"        pm.expect(tag.id).to.be.an(\"number\")\r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Tags number is 4\", function() {\r",
							"    pm.expect(tags.length).to.equal(4)\r",
							"})\r",
							"\r",
							"pm.test(\"Tags are stripped\", function() {\r",
							"    pm.expect(tags[0].display_name).to.equal(\"tag1\")\r",
							"    pm.expect(tags[1].display_name).to.equal(\"tag2\")\r",
							"    pm.expect(tags[2].display_name).to.equal(\"tag3\")\r",
							"    pm.expect(tags[3].display_name).to.equal(\"\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/tag/all",
					"host": [
						"{{url}}"
					],
					"path": [
						"tag",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Tag (view_tagged())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const tag = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(tag).to.be.an(\"object\")\r",
							"    pm.expect(tag.shows).to.be.an(\"array\")\r",
							"    if (tag.shows != null) {\r",
							"        tag.shows.forEach(function(show){\r",
							"            pm.expect(show).to.be.an(\"object\")\r",
							"            pm.expect(show.name).to.be.an(\"string\")\r",
							"            pm.expect(show.description).to.be.an(\"string\")\r",
							"            pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"            pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"            pm.expect(show.id).to.be.an(\"number\")\r",
							"            if (show.tags != null) {\r",
							"                show.tags.forEach(function(tag){\r",
							"                    pm.expect(tag).to.be.an(\"object\")\r",
							"                    pm.expect(tag.display_name).to.be.an(\"string\")\r",
							"                    pm.expect(tag.clean_name).to.be.an(\"string\")\r",
							"                    pm.expect(tag.id).to.be.an(\"number\")\r",
							"                })\r",
							"            }\r",
							"        })\r",
							"    }\r",
							"    pm.expect(tag.items).to.be.an(\"array\")\r",
							"    if (tag.items != null) {\r",
							"        tag.items.forEach(function(item){\r",
							"            pm.expect(item).to.be.an(\"object\")\r",
							"            pm.expect(item.name).to.be.an(\"string\")\r",
							"            pm.expect(item.image_url).to.be.an(\"string\")\r",
							"            pm.expect(item.description).to.be.an(\"string\")\r",
							"            pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"            pm.expect(item.play_date).to.be.an(\"string\")\r",
							"            pm.expect(item.id).to.be.an(\"number\")\r",
							"            if (item.shows != null) {\r",
							"                item.shows.forEach(function(show){\r",
							"                    pm.expect(show).to.be.an(\"object\")\r",
							"                    pm.expect(show.name).to.be.an(\"string\")\r",
							"                    pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"                    pm.expect(show.id).to.be.an(\"number\")\r",
							"                })\r",
							"            }\r",
							"            if (item.tags != null) {\r",
							"                item.tags.forEach(function(tag){\r",
							"                    pm.expect(tag).to.be.an(\"object\")\r",
							"                    pm.expect(tag.display_name).to.be.an(\"string\")\r",
							"                    pm.expect(tag.clean_name).to.be.an(\"string\")\r",
							"                    pm.expect(tag.id).to.be.an(\"number\")\r",
							"                })\r",
							"            }\r",
							"        })\r",
							"    }\r",
							"    pm.expect(tag.display_name).to.be.an(\"string\")\r",
							"    pm.expect(tag.clean_name).to.be.an(\"string\")\r",
							"    if (tag.icon != null) {\r",
							"        pm.expect(tag.icon).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(tag.id).to.be.an(\"number\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/tag/:clean_tag",
					"host": [
						"{{url}}"
					],
					"path": [
						"tag",
						":clean_tag"
					],
					"variable": [
						{
							"key": "clean_tag",
							"value": "tag2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Items (2, list_items())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const items = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(items).to.be.an(\"array\")\r",
							"    items.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.shows).to.be.an(\"array\")\r",
							"        item.shows.forEach(function(show){\r",
							"            pm.expect(show).to.be.an(\"object\")\r",
							"            pm.expect(show.name).to.be.an(\"string\")\r",
							"            pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"            pm.expect(show.id).to.be.an(\"number\")\r",
							"        })\r",
							"        pm.expect(item.live).to.be.an(\"boolean\")\r",
							"        pm.expect(item.broadcast).to.be.an(\"boolean\")\r",
							"        if (item.airing != null) {\r",
							"            pm.expect(item.airing).to.be.an(\"boolean\")\r",
							"        }\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.archive_lahmastore).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.language).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.archive_lahmastore_canonical_url).to.be.an(\"string\")\r",
							"        pm.expect(item.external_url).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.uploader).to.be.an(\"string\")\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Episodes number is 2\", function() {\r",
							"    pm.expect(items.length).to.equal(2)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/item/all",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Item (2 broadcast override, add_item())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"});\r",
							"\r",
							"pm.test(\"API responds within 20 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 20000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"var item = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(item).to.be.an(\"object\");\r",
							"    pm.expect(item.shows).to.be.an(\"array\");\r",
							"    item.shows.forEach(function(show) {\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(item.airing).to.be.an(\"boolean\");\r",
							"    pm.expect(item.archive_lahmastore).to.be.an(\"boolean\");\r",
							"    pm.expect(item.archived).to.be.an(\"boolean\");\r",
							"    pm.expect(item.broadcast).to.be.an(\"boolean\");\r",
							"    pm.expect(item.live).to.be.an(\"boolean\");\r",
							"    pm.expect(item.archive_lahmastore_canonical_url).to.be.an(\"string\");\r",
							"    pm.expect(item.external_url).to.be.an(\"string\");\r",
							"    pm.expect(item.description).to.be.an(\"string\");\r",
							"    pm.expect(item.image_url).to.be.an(\"string\");\r",
							"    pm.expect(item.language).to.be.an(\"string\");\r",
							"    pm.expect(item.name).to.be.an(\"string\");\r",
							"    pm.expect(item.play_date).to.be.an(\"string\");\r",
							"    if (item.play_file_name != null) {\r",
							"        pm.expect(item.play_file_name).to.be.an(\"string\");\r",
							"    }\r",
							"    pm.expect(item.uploader).to.be.an(\"string\");\r",
							"    pm.expect(item.download_count).to.be.an(\"number\");\r",
							"    pm.expect(item.id).to.be.an(\"number\");\r",
							"    pm.expect(item.number).to.be.an(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"Audio file uploaded with name: \" + item.play_file_name, () => {\r",
							"    pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var moment = require('moment');\r",
							"\r",
							"pm.environment.set('play_date', moment().subtract(6, 'day').format((\"YYYY-MM-DD\")));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "shows",
							"value": "{{new_show_id}}",
							"type": "text"
						},
						{
							"key": "show_name",
							"value": "{{new_show_name}}",
							"type": "text"
						},
						{
							"key": "number",
							"value": "2",
							"type": "text"
						},
						{
							"key": "name",
							"value": "example-item2",
							"type": "text"
						},
						{
							"key": "description",
							"value": "new broadcast lahmacun item 2 with hash",
							"type": "text"
						},
						{
							"key": "language",
							"value": "hu_hu",
							"type": "text"
						},
						{
							"key": "play_date",
							"value": "{{play_date}}",
							"type": "text"
						},
						{
							"key": "live",
							"value": "false",
							"type": "text"
						},
						{
							"key": "broadcast",
							"value": "true",
							"type": "text"
						},
						{
							"key": "archive_lahmastore",
							"value": "true",
							"type": "text"
						},
						{
							"key": "uploader",
							"value": "1",
							"type": "text"
						},
						{
							"key": "image_file",
							"type": "file",
							"src": "testlogo.jpg"
						},
						{
							"key": "play_file",
							"type": "file",
							"src": "testaudio.mp3"
						},
						{
							"key": "external_url",
							"value": "new live item 1",
							"type": "default"
						},
						{
							"key": "taglist",
							"value": "tag1, tag2, tag3, tag4",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/item/add",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Show for Show Subpage (view_show_page(show_slug))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"const show = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(show).to.be.an(\"object\")\r",
							"    pm.expect(show.items).to.be.an(\"array\")\r",
							"    show.items.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(show.active).to.be.an(\"boolean\")\r",
							"    pm.expect(show.name).to.be.an(\"string\")\r",
							"    pm.expect(show.description).to.be.an(\"string\")\r",
							"    pm.expect(show.language).to.be.an(\"string\")\r",
							"    pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"    pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"    if (show.external_url != null) {\r",
							"        pm.expect(show.external_url).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"    pm.expect(show.start).to.be.an(\"string\")\r",
							"    pm.expect(show.end).to.be.an(\"string\")\r",
							"    pm.expect(show.day).to.be.an(\"number\")\r",
							"    pm.expect(show.frequency).to.be.an(\"number\")\r",
							"    pm.expect(show.id).to.be.an(\"number\")\r",
							"})\r",
							"\r",
							"pm.test(\"Episodes number is 3\", function() {\r",
							"    pm.expect(show.items.length).to.equal(3)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/:show_slug/page?filter=archived",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						":show_slug",
						"page"
					],
					"query": [
						{
							"key": "filter",
							"value": "archived"
						}
					],
					"variable": [
						{
							"key": "show_slug",
							"value": "{{new_show_slug}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Show for Show Subpage (view_show_page(show_slug))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"const show = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(show).to.be.an(\"object\")\r",
							"    pm.expect(show.items).to.be.an(\"object\")\r",
							"    pm.expect(show.items.archived).to.be.an(\"boolean\")\r",
							"    pm.expect(show.items.name).to.be.an(\"string\")\r",
							"    pm.expect(show.items.name_slug).to.be.an(\"string\")\r",
							"    pm.expect(show.items.description).to.be.an(\"string\")\r",
							"    pm.expect(show.items.play_date).to.be.an(\"string\")\r",
							"    pm.expect(show.items.image_url).to.be.an(\"string\")\r",
							"    if (show.items.play_file_name != null) {\r",
							"        pm.expect(show.items.play_file_name).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.items.id).to.be.an(\"number\")\r",
							"    pm.expect(show.items.number).to.be.an(\"number\")\r",
							"    pm.expect(show.items.download_count).to.be.an(\"number\")\r",
							"    pm.expect(show.active).to.be.an(\"boolean\")\r",
							"    pm.expect(show.name).to.be.an(\"string\")\r",
							"    pm.expect(show.description).to.be.an(\"string\")\r",
							"    pm.expect(show.language).to.be.an(\"string\")\r",
							"    pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"    pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"    if (show.external_url != null) {\r",
							"        pm.expect(show.external_url).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"    pm.expect(show.start).to.be.an(\"string\")\r",
							"    pm.expect(show.end).to.be.an(\"string\")\r",
							"    pm.expect(show.day).to.be.an(\"number\")\r",
							"    pm.expect(show.frequency).to.be.an(\"number\")\r",
							"    pm.expect(show.id).to.be.an(\"number\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/:show_slug/page?filter=latest",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						":show_slug",
						"page"
					],
					"query": [
						{
							"key": "filter",
							"value": "latest"
						}
					],
					"variable": [
						{
							"key": "show_slug",
							"value": "{{new_show_slug}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Tags (5, list_tags())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const tags = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(tags).to.be.an(\"array\")\r",
							"    tags.forEach(function(tag) {\r",
							"        pm.expect(tag).to.be.an(\"object\")\r",
							"        pm.expect(tag.display_name).to.be.an(\"string\")\r",
							"        pm.expect(tag.clean_name).to.be.an(\"string\")\r",
							"        pm.expect(tag.id).to.be.an(\"number\")\r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Tags number is 5\", function() {\r",
							"    pm.expect(tags.length).to.equal(5)\r",
							"})\r",
							"\r",
							"pm.test(\"Tags are stripped\", function() {\r",
							"    pm.expect(tags[0].display_name).to.equal(\"tag1\")\r",
							"    pm.expect(tags[1].display_name).to.equal(\"tag2\")\r",
							"    pm.expect(tags[2].display_name).to.equal(\"tag3\")\r",
							"    pm.expect(tags[3].display_name).to.equal(\"\")\r",
							"    pm.expect(tags[4].display_name).to.equal(\"tag4\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/tag/all",
					"host": [
						"{{url}}"
					],
					"path": [
						"tag",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Tag (view_tagged())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const tag = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(tag).to.be.an(\"object\")\r",
							"    pm.expect(tag.shows).to.be.an(\"array\")\r",
							"    if (tag.shows != null) {\r",
							"        tag.shows.forEach(function(show){\r",
							"            pm.expect(show).to.be.an(\"object\")\r",
							"            pm.expect(show.name).to.be.an(\"string\")\r",
							"            pm.expect(show.description).to.be.an(\"string\")\r",
							"            pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"            pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"            pm.expect(show.id).to.be.an(\"number\")\r",
							"            if (show.tags != null) {\r",
							"                show.tags.forEach(function(tag){\r",
							"                    pm.expect(tag).to.be.an(\"object\")\r",
							"                    pm.expect(tag.display_name).to.be.an(\"string\")\r",
							"                    pm.expect(tag.clean_name).to.be.an(\"string\")\r",
							"                    pm.expect(tag.id).to.be.an(\"number\")\r",
							"                })\r",
							"            }\r",
							"        })\r",
							"    }\r",
							"    pm.expect(tag.items).to.be.an(\"array\")\r",
							"    if (tag.items != null) {\r",
							"        tag.items.forEach(function(item){\r",
							"            pm.expect(item).to.be.an(\"object\")\r",
							"            pm.expect(item.name).to.be.an(\"string\")\r",
							"            pm.expect(item.image_url).to.be.an(\"string\")\r",
							"            pm.expect(item.description).to.be.an(\"string\")\r",
							"            pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"            pm.expect(item.play_date).to.be.an(\"string\")\r",
							"            pm.expect(item.id).to.be.an(\"number\")\r",
							"            if (item.shows != null) {\r",
							"                item.shows.forEach(function(show){\r",
							"                    pm.expect(show).to.be.an(\"object\")\r",
							"                    pm.expect(show.name).to.be.an(\"string\")\r",
							"                    pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"                    pm.expect(show.id).to.be.an(\"number\")\r",
							"                })\r",
							"            }\r",
							"            if (item.tags != null) {\r",
							"                item.tags.forEach(function(tag){\r",
							"                    pm.expect(tag).to.be.an(\"object\")\r",
							"                    pm.expect(tag.display_name).to.be.an(\"string\")\r",
							"                    pm.expect(tag.clean_name).to.be.an(\"string\")\r",
							"                    pm.expect(tag.id).to.be.an(\"number\")\r",
							"                })\r",
							"            }\r",
							"        })\r",
							"    }\r",
							"    pm.expect(tag.display_name).to.be.an(\"string\")\r",
							"    pm.expect(tag.clean_name).to.be.an(\"string\")\r",
							"    if (tag.icon != null) {\r",
							"        pm.expect(tag.icon).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(tag.id).to.be.an(\"number\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/tag/:clean_tag",
					"host": [
						"{{url}}"
					],
					"path": [
						"tag",
						":clean_tag"
					],
					"variable": [
						{
							"key": "clean_tag",
							"value": "tag4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Items (3, list_items())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const items = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(items).to.be.an(\"array\")\r",
							"    items.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.shows).to.be.an(\"array\")\r",
							"        item.shows.forEach(function(show){\r",
							"            pm.expect(show).to.be.an(\"object\")\r",
							"            pm.expect(show.name).to.be.an(\"string\")\r",
							"            pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"            pm.expect(show.id).to.be.an(\"number\")\r",
							"        })\r",
							"        pm.expect(item.live).to.be.an(\"boolean\")\r",
							"        pm.expect(item.broadcast).to.be.an(\"boolean\")\r",
							"        if (item.airing != null) {\r",
							"            pm.expect(item.airing).to.be.an(\"boolean\")\r",
							"        }\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.archive_lahmastore).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.language).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.archive_lahmastore_canonical_url).to.be.an(\"string\")\r",
							"        pm.expect(item.external_url).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.uploader).to.be.an(\"string\")\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Episodes number is 3\", function() {\r",
							"    pm.expect(items.length).to.equal(3)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/item/all",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Item (3 live, add_item())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"});\r",
							"\r",
							"pm.test(\"API responds within 20 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 20000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"var item = JSON.parse(responseBody)\r",
							"pm.environment.set(\"new_item_id\", item.id);\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(item).to.be.an(\"object\");\r",
							"    pm.expect(item.shows).to.be.an(\"array\");\r",
							"    item.shows.forEach(function(show) {\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(item.airing).to.be.an(\"boolean\");\r",
							"    pm.expect(item.archive_lahmastore).to.be.an(\"boolean\");\r",
							"    pm.expect(item.archived).to.be.an(\"boolean\");\r",
							"    pm.expect(item.broadcast).to.be.an(\"boolean\");\r",
							"    pm.expect(item.live).to.be.an(\"boolean\");\r",
							"    pm.expect(item.archive_lahmastore_canonical_url).to.be.an(\"string\");\r",
							"    pm.expect(item.external_url).to.be.an(\"string\");\r",
							"    pm.expect(item.description).to.be.an(\"string\");\r",
							"    pm.expect(item.image_url).to.be.an(\"string\");\r",
							"    pm.expect(item.language).to.be.an(\"string\");\r",
							"    pm.expect(item.name).to.be.an(\"string\");\r",
							"    pm.expect(item.play_date).to.be.an(\"string\");\r",
							"    if (item.play_file_name != null) {\r",
							"        pm.expect(item.play_file_name).to.be.an(\"string\");\r",
							"    }\r",
							"    pm.expect(item.uploader).to.be.an(\"string\");\r",
							"    pm.expect(item.download_count).to.be.an(\"number\");\r",
							"    pm.expect(item.id).to.be.an(\"number\");\r",
							"    pm.expect(item.number).to.be.an(\"number\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var moment = require('moment');\r",
							"\r",
							"pm.environment.set('play_date', moment().subtract(1, 'day').format((\"YYYY-MM-DD\")));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "shows",
							"value": "{{new_show_id}}",
							"type": "text"
						},
						{
							"key": "show_name",
							"value": "{{new_show_name}}",
							"type": "text"
						},
						{
							"key": "number",
							"value": "3",
							"type": "text"
						},
						{
							"key": "name",
							"value": "example-item3",
							"type": "text"
						},
						{
							"key": "description",
							"value": "new live lahmacun item 3",
							"type": "text"
						},
						{
							"key": "language",
							"value": "hu_hu",
							"type": "text"
						},
						{
							"key": "play_date",
							"value": "{{play_date}}",
							"type": "text"
						},
						{
							"key": "live",
							"value": "true",
							"type": "text"
						},
						{
							"key": "broadcast",
							"value": "false",
							"type": "text"
						},
						{
							"key": "archive_lahmastore",
							"value": "true",
							"type": "text"
						},
						{
							"key": "uploader",
							"value": "1",
							"type": "text"
						},
						{
							"key": "image_file",
							"type": "file",
							"src": "testlogo.jpg"
						},
						{
							"key": "play_file",
							"type": "file",
							"src": []
						},
						{
							"key": "external_url",
							"value": "new live item 1",
							"type": "default"
						},
						{
							"key": "taglist",
							"value": "tag1, tag2, tag3",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/item/add",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Show for Show Subpage (view_show_page(show_slug))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"const show = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(show).to.be.an(\"object\")\r",
							"    pm.expect(show.items).to.be.an(\"array\")\r",
							"    show.items.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(show.active).to.be.an(\"boolean\")\r",
							"    pm.expect(show.name).to.be.an(\"string\")\r",
							"    pm.expect(show.description).to.be.an(\"string\")\r",
							"    pm.expect(show.language).to.be.an(\"string\")\r",
							"    pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"    pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"    if (show.external_url != null) {\r",
							"        pm.expect(show.external_url).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"    pm.expect(show.start).to.be.an(\"string\")\r",
							"    pm.expect(show.end).to.be.an(\"string\")\r",
							"    pm.expect(show.day).to.be.an(\"number\")\r",
							"    pm.expect(show.frequency).to.be.an(\"number\")\r",
							"    pm.expect(show.id).to.be.an(\"number\")\r",
							"})\r",
							"\r",
							"pm.test(\"Episodes number is 4\", function() {\r",
							"    pm.expect(show.items.length).to.equal(4)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/:show_slug/page",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						":show_slug",
						"page"
					],
					"variable": [
						{
							"key": "show_slug",
							"value": "{{new_show_slug}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Show for Show Subpage (view_show_page(show_slug))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"const show = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(show).to.be.an(\"object\")\r",
							"    pm.expect(show.items).to.be.an(\"object\")\r",
							"    pm.expect(show.items.archived).to.be.an(\"boolean\")\r",
							"    pm.expect(show.items.name).to.be.an(\"string\")\r",
							"    pm.expect(show.items.name_slug).to.be.an(\"string\")\r",
							"    pm.expect(show.items.description).to.be.an(\"string\")\r",
							"    pm.expect(show.items.play_date).to.be.an(\"string\")\r",
							"    pm.expect(show.items.image_url).to.be.an(\"string\")\r",
							"    if (show.items.play_file_name != null) {\r",
							"        pm.expect(show.items.play_file_name).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.items.id).to.be.an(\"number\")\r",
							"    pm.expect(show.items.number).to.be.an(\"number\")\r",
							"    pm.expect(show.items.download_count).to.be.an(\"number\")\r",
							"    pm.expect(show.active).to.be.an(\"boolean\")\r",
							"    pm.expect(show.name).to.be.an(\"string\")\r",
							"    pm.expect(show.description).to.be.an(\"string\")\r",
							"    pm.expect(show.language).to.be.an(\"string\")\r",
							"    pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"    pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"    if (show.external_url != null) {\r",
							"        pm.expect(show.external_url).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"    pm.expect(show.start).to.be.an(\"string\")\r",
							"    pm.expect(show.end).to.be.an(\"string\")\r",
							"    pm.expect(show.day).to.be.an(\"number\")\r",
							"    pm.expect(show.frequency).to.be.an(\"number\")\r",
							"    pm.expect(show.id).to.be.an(\"number\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/:show_slug/page?filter=latest",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						":show_slug",
						"page"
					],
					"query": [
						{
							"key": "filter",
							"value": "latest"
						}
					],
					"variable": [
						{
							"key": "show_slug",
							"value": "{{new_show_slug}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Items (4, list_items())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const items = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(items).to.be.an(\"array\")\r",
							"    items.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.shows).to.be.an(\"array\")\r",
							"        item.shows.forEach(function(show){\r",
							"            pm.expect(show).to.be.an(\"object\")\r",
							"            pm.expect(show.name).to.be.an(\"string\")\r",
							"            pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"            pm.expect(show.id).to.be.an(\"number\")\r",
							"        })\r",
							"        pm.expect(item.live).to.be.an(\"boolean\")\r",
							"        pm.expect(item.broadcast).to.be.an(\"boolean\")\r",
							"        if (item.airing != null) {\r",
							"            pm.expect(item.airing).to.be.an(\"boolean\")\r",
							"        }\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.archive_lahmastore).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.language).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.archive_lahmastore_canonical_url).to.be.an(\"string\")\r",
							"        pm.expect(item.external_url).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.uploader).to.be.an(\"string\")\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Episodes number is 4\", function() {\r",
							"    pm.expect(items.length).to.equal(4)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/item/all",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Item (3 live -> broadcast, edit_item(id))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"});\r",
							"\r",
							"pm.test(\"API responds within 20 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 20000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"var item = JSON.parse(responseBody)\r",
							"pm.environment.set(\"new_item_id\", item.id);\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(item).to.be.an(\"object\");\r",
							"    pm.expect(item.shows).to.be.an(\"array\");\r",
							"    item.shows.forEach(function(show) {\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(item.airing).to.be.an(\"boolean\");\r",
							"    pm.expect(item.archive_lahmastore).to.be.an(\"boolean\");\r",
							"    pm.expect(item.archived).to.be.an(\"boolean\");\r",
							"    pm.expect(item.broadcast).to.be.an(\"boolean\");\r",
							"    pm.expect(item.live).to.be.an(\"boolean\");\r",
							"    pm.expect(item.archive_lahmastore_canonical_url).to.be.an(\"string\");\r",
							"    pm.expect(item.external_url).to.be.an(\"string\");\r",
							"    pm.expect(item.description).to.be.an(\"string\");\r",
							"    pm.expect(item.image_url).to.be.an(\"string\");\r",
							"    pm.expect(item.language).to.be.an(\"string\");\r",
							"    pm.expect(item.name).to.be.an(\"string\");\r",
							"    pm.expect(item.play_date).to.be.an(\"string\");\r",
							"    if (item.play_file_name != null) {\r",
							"        pm.expect(item.play_file_name).to.be.an(\"string\");\r",
							"    }\r",
							"    pm.expect(item.uploader).to.be.an(\"string\");\r",
							"    pm.expect(item.download_count).to.be.an(\"number\");\r",
							"    pm.expect(item.id).to.be.an(\"number\");\r",
							"    pm.expect(item.number).to.be.an(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"Audio file uploaded with name: \" + item.play_file_name, () => {\r",
							"    pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var moment = require('moment');\r",
							"\r",
							"pm.environment.set('play_date', moment().format((\"YYYY-MM-DD\")));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "shows",
							"value": "{{new_show_id}}",
							"type": "text"
						},
						{
							"key": "show_name",
							"value": "{{new_show_name}}",
							"type": "text"
						},
						{
							"key": "number",
							"value": "3",
							"type": "text"
						},
						{
							"key": "name",
							"value": "example-item3",
							"type": "text"
						},
						{
							"key": "description",
							"value": "edit live lahmacun item 3 to broadcast",
							"type": "text"
						},
						{
							"key": "language",
							"value": "hu_en",
							"type": "text"
						},
						{
							"key": "play_date",
							"value": "{{play_date}}",
							"type": "text"
						},
						{
							"key": "live",
							"value": "false",
							"type": "text"
						},
						{
							"key": "broadcast",
							"value": "true",
							"type": "text"
						},
						{
							"key": "airing",
							"value": "true",
							"type": "text",
							"disabled": true
						},
						{
							"key": "uploader",
							"value": "1",
							"type": "text"
						},
						{
							"key": "archive_lahmastore",
							"value": "true",
							"type": "text"
						},
						{
							"key": "image_file",
							"type": "file",
							"src": "testlogo.jpg"
						},
						{
							"key": "play_file",
							"type": "file",
							"src": "testaudio.mp3"
						},
						{
							"key": "external_url",
							"value": "new live item 1",
							"type": "default"
						},
						{
							"key": "taglist",
							"value": "tag1, tag2, tag3",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/item/:id/edit",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						":id",
						"edit"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{new_item_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Show for Show Subpage (view_show_page(show_slug))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"const show = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(show).to.be.an(\"object\")\r",
							"    pm.expect(show.items).to.be.an(\"array\")\r",
							"    show.items.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(show.active).to.be.an(\"boolean\")\r",
							"    pm.expect(show.name).to.be.an(\"string\")\r",
							"    pm.expect(show.description).to.be.an(\"string\")\r",
							"    pm.expect(show.language).to.be.an(\"string\")\r",
							"    pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"    pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"    if (show.external_url != null) {\r",
							"        pm.expect(show.external_url).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"    pm.expect(show.start).to.be.an(\"string\")\r",
							"    pm.expect(show.end).to.be.an(\"string\")\r",
							"    pm.expect(show.day).to.be.an(\"number\")\r",
							"    pm.expect(show.frequency).to.be.an(\"number\")\r",
							"    pm.expect(show.id).to.be.an(\"number\")\r",
							"})\r",
							"\r",
							"pm.test(\"Episodes number is 3\", function() {\r",
							"    pm.expect(show.items.length).to.equal(3)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/:show_slug/page?filter=archived",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						":show_slug",
						"page"
					],
					"query": [
						{
							"key": "filter",
							"value": "archived"
						}
					],
					"variable": [
						{
							"key": "show_slug",
							"value": "{{new_show_slug}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Show for Show Subpage (view_show_page(show_slug))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"const show = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(show).to.be.an(\"object\")\r",
							"    pm.expect(show.items).to.be.an(\"array\")\r",
							"    show.items.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(show.active).to.be.an(\"boolean\")\r",
							"    pm.expect(show.name).to.be.an(\"string\")\r",
							"    pm.expect(show.description).to.be.an(\"string\")\r",
							"    pm.expect(show.language).to.be.an(\"string\")\r",
							"    pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"    pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"    if (show.external_url != null) {\r",
							"        pm.expect(show.external_url).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"    pm.expect(show.start).to.be.an(\"string\")\r",
							"    pm.expect(show.end).to.be.an(\"string\")\r",
							"    pm.expect(show.day).to.be.an(\"number\")\r",
							"    pm.expect(show.frequency).to.be.an(\"number\")\r",
							"    pm.expect(show.id).to.be.an(\"number\")\r",
							"})\r",
							"\r",
							"pm.test(\"Episodes number is 4\", function() {\r",
							"    pm.expect(show.items.length).to.equal(4)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/:show_slug/page",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						":show_slug",
						"page"
					],
					"variable": [
						{
							"key": "show_slug",
							"value": "{{new_show_slug}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Show for Show Subpage (view_show_page(show_slug))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"const show = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(show).to.be.an(\"object\")\r",
							"    pm.expect(show.items).to.be.an(\"object\")\r",
							"    pm.expect(show.items.archived).to.be.an(\"boolean\")\r",
							"    pm.expect(show.items.name).to.be.an(\"string\")\r",
							"    pm.expect(show.items.name_slug).to.be.an(\"string\")\r",
							"    pm.expect(show.items.description).to.be.an(\"string\")\r",
							"    pm.expect(show.items.play_date).to.be.an(\"string\")\r",
							"    pm.expect(show.items.image_url).to.be.an(\"string\")\r",
							"    if (show.items.play_file_name != null) {\r",
							"        pm.expect(show.items.play_file_name).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.items.id).to.be.an(\"number\")\r",
							"    pm.expect(show.items.number).to.be.an(\"number\")\r",
							"    pm.expect(show.items.download_count).to.be.an(\"number\")\r",
							"    pm.expect(show.active).to.be.an(\"boolean\")\r",
							"    pm.expect(show.name).to.be.an(\"string\")\r",
							"    pm.expect(show.description).to.be.an(\"string\")\r",
							"    pm.expect(show.language).to.be.an(\"string\")\r",
							"    pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"    pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"    if (show.external_url != null) {\r",
							"        pm.expect(show.external_url).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"    pm.expect(show.start).to.be.an(\"string\")\r",
							"    pm.expect(show.end).to.be.an(\"string\")\r",
							"    pm.expect(show.day).to.be.an(\"number\")\r",
							"    pm.expect(show.frequency).to.be.an(\"number\")\r",
							"    pm.expect(show.id).to.be.an(\"number\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/:show_slug/page?filter=latest",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						":show_slug",
						"page"
					],
					"query": [
						{
							"key": "filter",
							"value": "latest"
						}
					],
					"variable": [
						{
							"key": "show_slug",
							"value": "{{new_show_slug}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Item (3 broadcast, edit_item(id))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"});\r",
							"\r",
							"pm.test(\"API responds within 20 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 20000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"var item = JSON.parse(responseBody)\r",
							"pm.environment.set(\"new_item_id\", item.id);\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(item).to.be.an(\"object\");\r",
							"    pm.expect(item.shows).to.be.an(\"array\");\r",
							"    item.shows.forEach(function(show) {\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(item.airing).to.be.an(\"boolean\");\r",
							"    pm.expect(item.archive_lahmastore).to.be.an(\"boolean\");\r",
							"    pm.expect(item.archived).to.be.an(\"boolean\");\r",
							"    pm.expect(item.broadcast).to.be.an(\"boolean\");\r",
							"    pm.expect(item.live).to.be.an(\"boolean\");\r",
							"    pm.expect(item.archive_lahmastore_canonical_url).to.be.an(\"string\");\r",
							"    pm.expect(item.external_url).to.be.an(\"string\");\r",
							"    pm.expect(item.description).to.be.an(\"string\");\r",
							"    pm.expect(item.image_url).to.be.an(\"string\");\r",
							"    pm.expect(item.language).to.be.an(\"string\");\r",
							"    pm.expect(item.name).to.be.an(\"string\");\r",
							"    pm.expect(item.play_date).to.be.an(\"string\");\r",
							"    if (item.play_file_name != null) {\r",
							"        pm.expect(item.play_file_name).to.be.an(\"string\");\r",
							"    }\r",
							"    pm.expect(item.uploader).to.be.an(\"string\");\r",
							"    pm.expect(item.download_count).to.be.an(\"number\");\r",
							"    pm.expect(item.id).to.be.an(\"number\");\r",
							"    pm.expect(item.number).to.be.an(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"Audio file uploaded with name: \" + item.play_file_name, () => {\r",
							"    pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var moment = require('moment');\r",
							"\r",
							"pm.environment.set('play_date', moment().format((\"YYYY-MM-DD\")));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "shows",
							"value": "{{new_show_id}}",
							"type": "text"
						},
						{
							"key": "show_name",
							"value": "{{new_show_name}}",
							"type": "text"
						},
						{
							"key": "number",
							"value": "3",
							"type": "text"
						},
						{
							"key": "name",
							"value": "example-item3",
							"type": "text"
						},
						{
							"key": "description",
							"value": "edit broadcast lahmacun item 3 with hash",
							"type": "text"
						},
						{
							"key": "language",
							"value": "hu_en",
							"type": "text"
						},
						{
							"key": "play_date",
							"value": "{{play_date}}",
							"type": "text"
						},
						{
							"key": "live",
							"value": "false",
							"type": "text"
						},
						{
							"key": "broadcast",
							"value": "true",
							"type": "text"
						},
						{
							"key": "airing",
							"value": "true",
							"type": "text",
							"disabled": true
						},
						{
							"key": "uploader",
							"value": "1",
							"type": "text"
						},
						{
							"key": "archive_lahmastore",
							"value": "true",
							"type": "text"
						},
						{
							"key": "image_file",
							"type": "file",
							"src": "testlogo.jpg"
						},
						{
							"key": "play_file",
							"type": "file",
							"src": "testaudio.mp3"
						},
						{
							"key": "external_url",
							"value": "new live item 1",
							"type": "default"
						},
						{
							"key": "taglist",
							"value": "tag1, tag2, tag3",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/item/:id/edit",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						":id",
						"edit"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{new_item_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Items (4, list_items())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const items = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(items).to.be.an(\"array\")\r",
							"    items.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.shows).to.be.an(\"array\")\r",
							"        item.shows.forEach(function(show){\r",
							"            pm.expect(show).to.be.an(\"object\")\r",
							"            pm.expect(show.name).to.be.an(\"string\")\r",
							"            pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"            pm.expect(show.id).to.be.an(\"number\")\r",
							"        })\r",
							"        pm.expect(item.live).to.be.an(\"boolean\")\r",
							"        pm.expect(item.broadcast).to.be.an(\"boolean\")\r",
							"        if (item.airing != null) {\r",
							"            pm.expect(item.airing).to.be.an(\"boolean\")\r",
							"        }\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.archive_lahmastore).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.language).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.archive_lahmastore_canonical_url).to.be.an(\"string\")\r",
							"        pm.expect(item.external_url).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.uploader).to.be.an(\"string\")\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Episodes number is 4\", function() {\r",
							"    pm.expect(items.length).to.equal(4)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/item/all",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "View Item (4, view_item(id))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const item = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(item).to.be.an(\"object\")\r",
							"    pm.expect(item.shows).to.be.an(\"array\")\r",
							"    item.shows.forEach(function(show) {\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(item.live).to.be.an(\"boolean\")\r",
							"    pm.expect(item.broadcast).to.be.an(\"boolean\")\r",
							"    if (item.airing != null) {\r",
							"        pm.expect(item.airing).to.be.an(\"boolean\")\r",
							"    }\r",
							"    pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"    pm.expect(item.archive_lahmastore).to.be.an(\"boolean\")\r",
							"    pm.expect(item.name).to.be.an(\"string\")\r",
							"    pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"    pm.expect(item.description).to.be.an(\"string\")\r",
							"    pm.expect(item.language).to.be.an(\"string\")\r",
							"    pm.expect(item.play_date).to.be.an(\"string\")\r",
							"    pm.expect(item.archive_lahmastore_canonical_url).to.be.an(\"string\")\r",
							"    pm.expect(item.external_url).to.be.an(\"string\")\r",
							"    pm.expect(item.image_url).to.be.an(\"string\")\r",
							"    if (item.play_file_name != null) {\r",
							"        pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(item.uploader).to.be.an(\"string\")\r",
							"    pm.expect(item.id).to.be.an(\"number\")\r",
							"    pm.expect(item.number).to.be.an(\"number\")\r",
							"    pm.expect(item.download_count).to.be.an(\"number\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/item/:id",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{new_item_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Item (4 live, add_item())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"});\r",
							"\r",
							"pm.test(\"API responds within 20 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 20000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"var item = JSON.parse(responseBody)\r",
							"pm.environment.set(\"new_item_id\", item.id);\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(item).to.be.an(\"object\");\r",
							"    pm.expect(item.shows).to.be.an(\"array\");\r",
							"    item.shows.forEach(function(show) {\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(item.airing).to.be.an(\"boolean\");\r",
							"    pm.expect(item.archive_lahmastore).to.be.an(\"boolean\");\r",
							"    pm.expect(item.archived).to.be.an(\"boolean\");\r",
							"    pm.expect(item.broadcast).to.be.an(\"boolean\");\r",
							"    pm.expect(item.live).to.be.an(\"boolean\");\r",
							"    pm.expect(item.archive_lahmastore_canonical_url).to.be.an(\"string\");\r",
							"    pm.expect(item.external_url).to.be.an(\"string\");\r",
							"    pm.expect(item.description).to.be.an(\"string\");\r",
							"    pm.expect(item.image_url).to.be.an(\"string\");\r",
							"    pm.expect(item.language).to.be.an(\"string\");\r",
							"    pm.expect(item.name).to.be.an(\"string\");\r",
							"    pm.expect(item.play_date).to.be.an(\"string\");\r",
							"    if (item.play_file_name != null) {\r",
							"        pm.expect(item.play_file_name).to.be.an(\"string\");\r",
							"    }\r",
							"    pm.expect(item.uploader).to.be.an(\"string\");\r",
							"    pm.expect(item.download_count).to.be.an(\"number\");\r",
							"    pm.expect(item.id).to.be.an(\"number\");\r",
							"    pm.expect(item.number).to.be.an(\"number\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var moment = require('moment');\r",
							"\r",
							"pm.environment.set('play_date', moment().add(7, 'day').format((\"YYYY-MM-DD\")));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_admin}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "shows",
							"value": "{{new_show_id}}",
							"type": "text"
						},
						{
							"key": "show_name",
							"value": "{{new_show_name}}",
							"type": "text"
						},
						{
							"key": "number",
							"value": "4",
							"type": "text"
						},
						{
							"key": "name",
							"value": "example-item4",
							"type": "text"
						},
						{
							"key": "description",
							"value": "new live lahmacun item 4",
							"type": "text"
						},
						{
							"key": "language",
							"value": "hu_hu",
							"type": "text"
						},
						{
							"key": "play_date",
							"value": "{{play_date}}",
							"type": "text"
						},
						{
							"key": "live",
							"value": "true",
							"type": "text"
						},
						{
							"key": "broadcast",
							"value": "false",
							"type": "text"
						},
						{
							"key": "archive_lahmastore",
							"value": "true",
							"type": "text"
						},
						{
							"key": "uploader",
							"value": "1",
							"type": "text"
						},
						{
							"key": "image_file",
							"type": "file",
							"src": "testlogo.jpg"
						},
						{
							"key": "play_file",
							"type": "file",
							"src": []
						},
						{
							"key": "external_url",
							"value": "new live item 1",
							"type": "default"
						},
						{
							"key": "taglist",
							"value": "tag1, tag2, tag3",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/item/add",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Show for Show Subpage (view_show_page(show_slug))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"const show = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(show).to.be.an(\"object\")\r",
							"    pm.expect(show.items).to.be.an(\"array\")\r",
							"    show.items.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(show.active).to.be.an(\"boolean\")\r",
							"    pm.expect(show.name).to.be.an(\"string\")\r",
							"    pm.expect(show.description).to.be.an(\"string\")\r",
							"    pm.expect(show.language).to.be.an(\"string\")\r",
							"    pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"    pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"    if (show.external_url != null) {\r",
							"        pm.expect(show.external_url).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"    pm.expect(show.start).to.be.an(\"string\")\r",
							"    pm.expect(show.end).to.be.an(\"string\")\r",
							"    pm.expect(show.day).to.be.an(\"number\")\r",
							"    pm.expect(show.frequency).to.be.an(\"number\")\r",
							"    pm.expect(show.id).to.be.an(\"number\")\r",
							"})\r",
							"\r",
							"pm.test(\"Episodes number is 3\", function() {\r",
							"    pm.expect(show.items.length).to.equal(3)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/:show_slug/page?filter=archived",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						":show_slug",
						"page"
					],
					"query": [
						{
							"key": "filter",
							"value": "archived"
						}
					],
					"variable": [
						{
							"key": "show_slug",
							"value": "{{new_show_slug}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Show for Show Subpage (view_show_page(show_slug))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"const show = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(show).to.be.an(\"object\")\r",
							"    pm.expect(show.items).to.be.an(\"array\")\r",
							"    show.items.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(show.active).to.be.an(\"boolean\")\r",
							"    pm.expect(show.name).to.be.an(\"string\")\r",
							"    pm.expect(show.description).to.be.an(\"string\")\r",
							"    pm.expect(show.language).to.be.an(\"string\")\r",
							"    pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"    pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"    if (show.external_url != null) {\r",
							"        pm.expect(show.external_url).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"    pm.expect(show.start).to.be.an(\"string\")\r",
							"    pm.expect(show.end).to.be.an(\"string\")\r",
							"    pm.expect(show.day).to.be.an(\"number\")\r",
							"    pm.expect(show.frequency).to.be.an(\"number\")\r",
							"    pm.expect(show.id).to.be.an(\"number\")\r",
							"})\r",
							"\r",
							"pm.test(\"Episodes number is 5\", function() {\r",
							"    pm.expect(show.items.length).to.equal(5)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/:show_slug/page",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						":show_slug",
						"page"
					],
					"variable": [
						{
							"key": "show_slug",
							"value": "{{new_show_slug}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Show for Show Subpage (view_show_page(show_slug))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"const show = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(show).to.be.an(\"object\")\r",
							"    pm.expect(show.items).to.be.an(\"object\")\r",
							"    pm.expect(show.items.archived).to.be.an(\"boolean\")\r",
							"    pm.expect(show.items.name).to.be.an(\"string\")\r",
							"    pm.expect(show.items.name_slug).to.be.an(\"string\")\r",
							"    pm.expect(show.items.description).to.be.an(\"string\")\r",
							"    pm.expect(show.items.play_date).to.be.an(\"string\")\r",
							"    pm.expect(show.items.image_url).to.be.an(\"string\")\r",
							"    if (show.items.play_file_name != null) {\r",
							"        pm.expect(show.items.play_file_name).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.items.id).to.be.an(\"number\")\r",
							"    pm.expect(show.items.number).to.be.an(\"number\")\r",
							"    pm.expect(show.items.download_count).to.be.an(\"number\")\r",
							"    pm.expect(show.active).to.be.an(\"boolean\")\r",
							"    pm.expect(show.name).to.be.an(\"string\")\r",
							"    pm.expect(show.description).to.be.an(\"string\")\r",
							"    pm.expect(show.language).to.be.an(\"string\")\r",
							"    pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"    pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"    if (show.external_url != null) {\r",
							"        pm.expect(show.external_url).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"    pm.expect(show.start).to.be.an(\"string\")\r",
							"    pm.expect(show.end).to.be.an(\"string\")\r",
							"    pm.expect(show.day).to.be.an(\"number\")\r",
							"    pm.expect(show.frequency).to.be.an(\"number\")\r",
							"    pm.expect(show.id).to.be.an(\"number\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/:show_slug/page?filter=latest",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						":show_slug",
						"page"
					],
					"query": [
						{
							"key": "filter",
							"value": "latest"
						}
					],
					"variable": [
						{
							"key": "show_slug",
							"value": "{{new_show_slug}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Items (5, list_items())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const items = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(items).to.be.an(\"array\")\r",
							"    items.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.shows).to.be.an(\"array\")\r",
							"        item.shows.forEach(function(show){\r",
							"            pm.expect(show).to.be.an(\"object\")\r",
							"            pm.expect(show.name).to.be.an(\"string\")\r",
							"            pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"            pm.expect(show.id).to.be.an(\"number\")\r",
							"        })\r",
							"        pm.expect(item.live).to.be.an(\"boolean\")\r",
							"        pm.expect(item.broadcast).to.be.an(\"boolean\")\r",
							"        if (item.airing != null) {\r",
							"            pm.expect(item.airing).to.be.an(\"boolean\")\r",
							"        }\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.archive_lahmastore).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.language).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.archive_lahmastore_canonical_url).to.be.an(\"string\")\r",
							"        pm.expect(item.external_url).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.uploader).to.be.an(\"string\")\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Episodes number is 5\", function() {\r",
							"    pm.expect(items.length).to.equal(5)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/item/all",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "View Item (5, view_item(id))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"pm.test(\"API responds within 5 sec (\" + pm.response.responseTime + \" msec)\", () => {\r",
							"    const expectedTimeInMilliseconds = 5000;\r",
							"    pm.expect(pm.response.responseTime).to.be.lessThan(\r",
							"        expectedTimeInMilliseconds + 1,\r",
							"        `Response came in ${pm.response.responseTime} ms`);\r",
							"});\r",
							"\r",
							"const item = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(item).to.be.an(\"object\")\r",
							"    pm.expect(item.shows).to.be.an(\"array\")\r",
							"    item.shows.forEach(function(show) {\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(item.live).to.be.an(\"boolean\")\r",
							"    pm.expect(item.broadcast).to.be.an(\"boolean\")\r",
							"    if (item.airing != null) {\r",
							"        pm.expect(item.airing).to.be.an(\"boolean\")\r",
							"    }\r",
							"    pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"    pm.expect(item.archive_lahmastore).to.be.an(\"boolean\")\r",
							"    pm.expect(item.name).to.be.an(\"string\")\r",
							"    pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"    pm.expect(item.description).to.be.an(\"string\")\r",
							"    pm.expect(item.language).to.be.an(\"string\")\r",
							"    pm.expect(item.play_date).to.be.an(\"string\")\r",
							"    pm.expect(item.archive_lahmastore_canonical_url).to.be.an(\"string\")\r",
							"    pm.expect(item.external_url).to.be.an(\"string\")\r",
							"    pm.expect(item.image_url).to.be.an(\"string\")\r",
							"    if (item.play_file_name != null) {\r",
							"        pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(item.uploader).to.be.an(\"string\")\r",
							"    pm.expect(item.id).to.be.an(\"number\")\r",
							"    pm.expect(item.number).to.be.an(\"number\")\r",
							"    pm.expect(item.download_count).to.be.an(\"number\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/item/:id",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{new_item_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Latest Items (list_items_latest())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"\r",
							"const jsonData = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(jsonData).to.be.an(\"array\")\r",
							"    jsonData.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.shows).to.be.an(\"array\")\r",
							"        item.shows.forEach(function(show){\r",
							"            pm.expect(show).to.be.an(\"object\")\r",
							"            pm.expect(show.name).to.be.an(\"string\")\r",
							"            pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"            pm.expect(show.id).to.be.an(\"number\")\r",
							"        })\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.language).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/item/latest?page=1&size=12",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"latest"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "size",
							"value": "12"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Item (search_item())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"\r",
							"const jsonData = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(jsonData).to.be.an(\"array\")\r",
							"    jsonData.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.shows).to.be.an(\"array\")\r",
							"        item.shows.forEach(function(show){\r",
							"            pm.expect(show).to.be.an(\"object\")\r",
							"            pm.expect(show.name).to.be.an(\"string\")\r",
							"            pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"            pm.expect(show.id).to.be.an(\"number\")\r",
							"        })\r",
							"        pm.expect(item.live).to.be.an(\"boolean\")\r",
							"        pm.expect(item.broadcast).to.be.an(\"boolean\")\r",
							"        if (item.airing != null) {\r",
							"            pm.expect(item.airing).to.be.an(\"boolean\")\r",
							"        }\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.archive_lahmastore).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.language).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.archive_lahmastore_canonical_url).to.be.an(\"string\")\r",
							"        pm.expect(item.external_url).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.uploader).to.be.an(\"string\")\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/item/search?param=item&page=1&size=12",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"search"
					],
					"query": [
						{
							"key": "param",
							"value": "item"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "size",
							"value": "12"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "View Item with Slug (view_episode_archive(show_slug, item_slug))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"const item = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(item).to.be.an(\"object\")\r",
							"    pm.expect(item.shows).to.be.an(\"array\")\r",
							"    item.shows.forEach(function(show){\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"    pm.expect(item.name).to.be.an(\"string\")\r",
							"    pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"    pm.expect(item.description).to.be.an(\"string\")\r",
							"    pm.expect(item.language).to.be.an(\"string\")\r",
							"    pm.expect(item.play_date).to.be.an(\"string\")\r",
							"    pm.expect(item.image_url).to.be.an(\"string\")\r",
							"    if (item.play_file_name != null) {\r",
							"        pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(item.id).to.be.an(\"number\")\r",
							"    pm.expect(item.number).to.be.an(\"number\")\r",
							"    pm.expect(item.download_count).to.be.an(\"number\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/:show_slug/item/:item_slug",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						":show_slug",
						"item",
						":item_slug"
					],
					"variable": [
						{
							"key": "show_slug",
							"value": "{{new_show_slug}}"
						},
						{
							"key": "item_slug",
							"value": "example_item1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Shows Paginated (list_shows_page())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"\r",
							"const jsonData = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(jsonData).to.be.an(\"array\")\r",
							"    jsonData.forEach(function(show) {\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.active).to.be.an(\"boolean\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
							"        pm.expect(show.description).to.be.an(\"string\")\r",
							"        pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        if (show.external_url != null) {\r",
							"            pm.expect(show.external_url).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/list",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Shows without Items (list_shows_without_items())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"\r",
							"const jsonData = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(jsonData).to.be.an(\"array\")\r",
							"    jsonData.forEach(function(show) {\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.users).to.be.an(\"array\")\r",
							"        show.users.forEach(function(user) {\r",
							"            pm.expect(user).to.be.an(\"object\")\r",
							"            pm.expect(user.name).to.be.an(\"string\")\r",
							"            pm.expect(user.email).to.be.an(\"string\")\r",
							"            pm.expect(user.id).to.be.an(\"number\")\r",
							"        })\r",
							"        pm.expect(show.active).to.be.an(\"boolean\")\r",
							"        pm.expect(show.archive_lahmastore).to.be.an(\"boolean\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
							"        pm.expect(show.description).to.be.an(\"string\")\r",
							"        pm.expect(show.language).to.be.an(\"string\")\r",
							"        pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        if (show.external_url != null) {\r",
							"            pm.expect(show.external_url).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"        pm.expect(show.start).to.be.an(\"string\")\r",
							"        pm.expect(show.end).to.be.an(\"string\")\r",
							"        pm.expect(show.day).to.be.an(\"number\")\r",
							"        pm.expect(show.frequency).to.be.an(\"number\")\r",
							"        pm.expect(show.week).to.be.an(\"number\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/all_without_items",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						"all_without_items"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Show (search_show())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"\r",
							"const jsonData = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(jsonData).to.be.an(\"array\")\r",
							"    jsonData.forEach(function(show) {\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.users).to.be.an(\"array\")\r",
							"        show.users.forEach(function(user) {\r",
							"            pm.expect(user).to.be.an(\"object\")\r",
							"            pm.expect(user.name).to.be.an(\"string\")\r",
							"            pm.expect(user.email).to.be.an(\"string\")\r",
							"            pm.expect(user.id).to.be.an(\"number\")\r",
							"        })\r",
							"        pm.expect(show.active).to.be.an(\"boolean\")\r",
							"        pm.expect(show.archive_lahmastore).to.be.an(\"boolean\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
							"        pm.expect(show.description).to.be.an(\"string\")\r",
							"        pm.expect(show.language).to.be.an(\"string\")\r",
							"        pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        if (show.external_url != null) {\r",
							"            pm.expect(show.external_url).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"        pm.expect(show.start).to.be.an(\"string\")\r",
							"        pm.expect(show.end).to.be.an(\"string\")\r",
							"        pm.expect(show.day).to.be.an(\"number\")\r",
							"        pm.expect(show.frequency).to.be.an(\"number\")\r",
							"        pm.expect(show.week).to.be.an(\"number\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/search?param=show&page=1&size=12",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						"search"
					],
					"query": [
						{
							"key": "param",
							"value": "show"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "size",
							"value": "12"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Shows for Schedule (list_shows_for_schedule())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"\r",
							"const jsonData = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    pm.expect(jsonData).to.be.an(\"array\")\r",
							"    jsonData.forEach(function(show) {\r",
							"        pm.expect(show).to.be.an(\"object\")\r",
							"        pm.expect(show.users).to.be.an(\"array\")\r",
							"        show.users.forEach(function(user) {\r",
							"            pm.expect(user).to.be.an(\"object\")\r",
							"            pm.expect(user.name).to.be.an(\"string\")\r",
							"            pm.expect(user.email).to.be.an(\"string\")\r",
							"            pm.expect(user.id).to.be.an(\"number\")\r",
							"        })\r",
							"        pm.expect(show.active).to.be.an(\"boolean\")\r",
							"        pm.expect(show.archive_lahmastore).to.be.an(\"boolean\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
							"        pm.expect(show.description).to.be.an(\"string\")\r",
							"        pm.expect(show.language).to.be.an(\"string\")\r",
							"        pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        if (show.external_url != null) {\r",
							"            pm.expect(show.external_url).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"        pm.expect(show.start).to.be.an(\"string\")\r",
							"        pm.expect(show.end).to.be.an(\"string\")\r",
							"        pm.expect(show.day).to.be.an(\"number\")\r",
							"        pm.expect(show.frequency).to.be.an(\"number\")\r",
							"        pm.expect(show.week).to.be.an(\"number\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/schedule",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						"schedule"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Shows for Schedule by Day (list_shows_for_schedule_by())",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is text/html\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\")\r",
							"})\r",
							"/*\r",
							"const jsonData = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody fields are correct!\", function() {\r",
							"    if (pm.expect(jsonData).to.be.an(\"array\")) {\r",
							"        jsonData.forEach(function(show) {\r",
							"            pm.expect(show).to.be.an(\"object\")\r",
							"            if (show.items != null) {\r",
							"                const latestEpisode = show.items\r",
							"                pm.expect(latestEpisode).to.be.an(\"object\")\r",
							"                pm.expect(latestEpisode.archived).to.be.an(\"boolean\")\r",
							"                pm.expect(latestEpisode.name).to.be.an(\"string\")\r",
							"                pm.expect(latestEpisode.name_slug).to.be.an(\"string\")\r",
							"                pm.expect(latestEpisode.description).to.be.an(\"string\")\r",
							"                pm.expect(latestEpisode.play_date).to.be.an(\"string\")\r",
							"                pm.expect(latestEpisode.image_url).to.be.an(\"string\")\r",
							"                if (latestEpisode.play_file_name != null) {\r",
							"                    pm.expect(latestEpisode.play_file_name).to.be.an(\"string\")\r",
							"                }\r",
							"                pm.expect(latestEpisode.id).to.be.an(\"number\")\r",
							"                pm.expect(latestEpisode.number).to.be.an(\"number\")\r",
							"                pm.expect(latestEpisode.download_count).to.be.an(\"number\")\r",
							"            }\r",
							"            pm.expect(show.active).to.be.an(\"boolean\")\r",
							"            pm.expect(show.name).to.be.an(\"string\")\r",
							"            pm.expect(show.description).to.be.an(\"string\")\r",
							"            pm.expect(show.contact_address).to.be.an(\"string\")\r",
							"            pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"            pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"            pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"            pm.expect(show.start).to.be.an(\"string\")\r",
							"            pm.expect(show.end).to.be.an(\"string\")\r",
							"            pm.expect(show.day).to.be.an(\"number\")\r",
							"            pm.expect(show.frequency).to.be.an(\"number\")\r",
							"            pm.expect(show.id).to.be.an(\"number\")\r",
							"        })\r",
							"    }\r",
							"    else if (pm.expect(jsonData).to.be.an(\"object\")) {\r",
							"        const show = jsonData\r",
							"        if (show.items != null) {\r",
							"            const latestEpisode = show.items\r",
							"            pm.expect(latestEpisode).to.be.an(\"object\")\r",
							"            pm.expect(latestEpisode.archived).to.be.an(\"boolean\")\r",
							"            pm.expect(latestEpisode.name).to.be.an(\"string\")\r",
							"            pm.expect(latestEpisode.name_slug).to.be.an(\"string\")\r",
							"            pm.expect(latestEpisode.description).to.be.an(\"string\")\r",
							"            pm.expect(latestEpisode.play_date).to.be.an(\"string\")\r",
							"            pm.expect(latestEpisode.image_url).to.be.an(\"string\")\r",
							"            if (latestEpisode.play_file_name != null) {\r",
							"                pm.expect(latestEpisode.play_file_name).to.be.an(\"string\")\r",
							"            }\r",
							"            pm.expect(latestEpisode.id).to.be.an(\"number\")\r",
							"            pm.expect(latestEpisode.number).to.be.an(\"number\")\r",
							"            pm.expect(latestEpisode.download_count).to.be.an(\"number\")\r",
							"        }\r",
							"        pm.expect(show.active).to.be.an(\"boolean\")\r",
							"        pm.expect(show.name).to.be.an(\"string\")\r",
							"        pm.expect(show.description).to.be.an(\"string\")\r",
							"        pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"        pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"        pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"        pm.expect(show.start).to.be.an(\"string\")\r",
							"        pm.expect(show.end).to.be.an(\"string\")\r",
							"        pm.expect(show.day).to.be.an(\"number\")\r",
							"        pm.expect(show.frequency).to.be.an(\"number\")\r",
							"        pm.expect(show.id).to.be.an(\"number\")\r",
							"    }\r",
							"    else {\r",
							"        pm.expect(jsonData).to.be.equal(\"[]\")\r",
							"    }\r",
							"})\r",
							"*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/schedule_by?day=1",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						"schedule_by"
					],
					"query": [
						{
							"key": "day",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Show for Show Subpage (view_show_page(show_slug))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"})\r",
							"\r",
							"const show = JSON.parse(responseBody)\r",
							"pm.test(\"ResponseBody is OK!\", function() {\r",
							"    pm.expect(show).to.be.an(\"object\")\r",
							"    pm.expect(show.items).to.be.an(\"array\")\r",
							"    show.items.forEach(function(item) {\r",
							"        pm.expect(item).to.be.an(\"object\")\r",
							"        pm.expect(item.archived).to.be.an(\"boolean\")\r",
							"        pm.expect(item.name).to.be.an(\"string\")\r",
							"        pm.expect(item.name_slug).to.be.an(\"string\")\r",
							"        pm.expect(item.description).to.be.an(\"string\")\r",
							"        pm.expect(item.play_date).to.be.an(\"string\")\r",
							"        pm.expect(item.image_url).to.be.an(\"string\")\r",
							"        if (item.play_file_name != null) {\r",
							"            pm.expect(item.play_file_name).to.be.an(\"string\")\r",
							"        }\r",
							"        pm.expect(item.id).to.be.an(\"number\")\r",
							"        pm.expect(item.number).to.be.an(\"number\")\r",
							"        pm.expect(item.download_count).to.be.an(\"number\")\r",
							"    })\r",
							"    pm.expect(show.active).to.be.an(\"boolean\")\r",
							"    pm.expect(show.name).to.be.an(\"string\")\r",
							"    pm.expect(show.description).to.be.an(\"string\")\r",
							"    pm.expect(show.language).to.be.an(\"string\")\r",
							"    pm.expect(show.playlist_name).to.be.an(\"string\")\r",
							"    pm.expect(show.archive_lahmastore_base_url).to.be.an(\"string\")\r",
							"    if (show.external_url != null) {\r",
							"        pm.expect(show.external_url).to.be.an(\"string\")\r",
							"    }\r",
							"    pm.expect(show.cover_image_url).to.be.an(\"string\")\r",
							"    pm.expect(show.start).to.be.an(\"string\")\r",
							"    pm.expect(show.end).to.be.an(\"string\")\r",
							"    pm.expect(show.day).to.be.an(\"number\")\r",
							"    pm.expect(show.frequency).to.be.an(\"number\")\r",
							"    pm.expect(show.id).to.be.an(\"number\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authentication-Token",
						"value": "{{api_token_guest}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/show/:show_slug/page",
					"host": [
						"{{url}}"
					],
					"path": [
						"show",
						":show_slug",
						"page"
					],
					"variable": [
						{
							"key": "show_slug",
							"value": "{{new_show_slug}}"
						}
					]
				}
			},
			"response": []
		}
	]
}